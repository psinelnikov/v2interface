{"version":3,"sources":["Components/connectWalletPage.js","constants/chains.js","ethereumFunctions.js","constants/coins.js","network.js","NavBar/MenuItems.js","NavBar/NavBar.js","CoinSwapper/CoinField.js","CoinSwapper/CoinButton.js","CoinSwapper/CoinDialog.js","Components/LoadingButton.js","Components/wrongNetwork.js","CoinSwapper/CoinSwapper.js","Liquidity/SwitchButton.js","Liquidity/LiquidityFunctions.js","Liquidity/LiquidityDeployer.js","Liquidity/RemoveLiquidity.js","Liquidity/Liquidity.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","paperContainer","borderRadius","spacing","padding","paddingBottom","maxWidth","margin","marginTop","fullWidth","width","title","textAlign","marginBottom","hr","balance","overflow","buttonIcon","marginRight","footer","ConnectWalletPage","classes","Container","Paper","className","Typography","variant","color","networks","ChainId","routerAddress","Map","set","ROUTER","require","ERC20","FACTORY","PAIR","getNetwork","provider","a","network","chainId","getWeth","address","signer","Contract","abi","getFactory","getAccount","window","ethereum","request","method","accounts","getDecimals","token","decimals","then","result","catch","error","console","log","getBalanceAndSymbol","accountAddress","weth_address","coins","getBalance","balanceRaw","ethers","utils","formatEther","symbol","abbr","tokenDecimals","balanceOf","address1","address2","amount","routerContract","tokens","time","Math","floor","Date","now","deadline","BigNumber","from","token1","amountIn","parseUnits","callStatic","getAmountsOut","amountOut","approve","WETH","wethAddress","swapExactETHForTokens","value","swapExactTokensForETH","swapExactTokensForTokens","token1Decimals","token2","token2Decimals","String","values_out","amount_out","Number","fetchReserves","pair","coin1","coin2","coin1Decimals","coin2Decimals","getReserves","reservesRaw","token0","results","factory","getPair","pairAddress","liquidityTokens_BN","liquidityTokens","toPrecision","COINS","chains","name","Web3Provider","props","useState","isConnected","setConnected","Object","create","useRef","account","chainID","router","weth","backgroundListener","setupConnection","useCallback","providers","getSigner","includes","get","factory_address","createListener","setInterval","useEffect","current","clearInterval","listener","initialSetup","render","MenuItems","url","cName","NavBar","location","useLocation","map","item","index","isActive","pathname","to","container","minHeight","backgroundColor","borderColor","borderWidth","borderStyle","container_input","marginLeft","container_blank","grid","height","fab","zIndex","input","typography","h5","inputBase","RemoveLiquidityField1","onClick","onChange","activeField","Grid","direction","justifyContent","alignItems","xs","Fab","size","InputBase","placeholder","disabled","root","RemoveLiquidityField2","CoinField","button","paddingTop","coinName","opacity","CoinButton","coinAbbr","ButtonBase","focusRipple","styles","dialogContainer","titleSection","titleText","alignSelf","paddingLeft","paddingRight","coinList","overflowY","coinContainer","DialogTitle","withStyles","children","onClose","other","disableTypography","alignContent","IconButton","aria-label","style","DialogActions","MuiDialogActions","CoinDialog","open","React","setAddress","setError","exit","Dialog","undefined","paper","TextField","e","target","helperText","InputProps","InputLabelProps","FormHelperTextProps","coin","Button","autoFocus","err","doesTokenExist","fontWeight","wrapper","position","progress","green","top","left","disabledButton","palette","secondary","main","contrastText","LoadingButton","loading","valid","success","fail","type","CircularProgress","WrongNetwork","switchButton","primary","CoinSwapper","enqueueSnackbar","useSnackbar","dialog1Open","setDialog1Open","dialog2Open","setDialog2Open","wrongNetworkOpen","setCoin1","setCoin2","reserves","setReserves","field1Value","setField1Value","field2Value","setField2Value","setLoading","switchFields","reverse","handleChange","field1","formatBalance","parseFloat","formatReserve","reserve","data","isNaN","getAmountOut","toFixed","coinTimeout","setTimeout","clearTimeout","fontSize","parsedInput1","parsedInput2","isButtonEnabled","swapTokens","message","autoHideDuration","SwitchButton","setDeploy","changeStyles","K","add_button","document","getElementById","remove_button","ButtonGroup","id","text","amount1","amount2","amount1min","amount2min","amountIn1","amountIn2","amount1Min","amount2Min","addLiquidityETH","addLiquidity","liquidity_tokens","liquidity","Getliquidity","removeLiquidityETH","removeLiquidity","quote","reserve1","reserve2","quoteMintLiquidity","amountA","amountB","MINIMUM_LIQUIDITY","_reserveA","_reserveB","totalSupply","reserveA","reserveB","_totalSupply","valueA","valueB","sqrt","min","amountADesired","amountBDesired","amountBOptimal","amountAOptimal","feeTo","feeOn","kLast","_kLast","feeLiquidity","Aout","Bout","background","values","LiquidityDeployer","setLiquidityTokens","liquidityOut","setLiquidityOut","oldField1Value","oldField2Value","field2","quoteAddLiquidity","networksigner","LiquidityRemover","tokensOut","setTokensOut","parsedInput","quoteRemoveLiquidity","Liquidity","deploy","deploy_or_remove","createTheme","default","App","maxSnack","ThemeProvider","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.41f4ebec.chunk.js","sourcesContent":["import React from \"react\";\nimport { Container, makeStyles, Paper, Typography } from \"@material-ui/core\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    maxWidth: 700,\n    margin: \"auto\",\n    marginTop: \"200px\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n  footer: {\n    marginTop: \"155px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction ConnectWalletPage() {\n  const classes = useStyles();\n  return (\n    <div>\n      {/* <div className=\"Title\">\n        <h1 className=\"navbar-logo\">Uniswap v2 Interface</h1>\n      </div> */}\n\n      <Container>\n        <Paper className={classes.paperContainer}>\n          <Typography\n            variant=\"h6\"\n            className={classes.title}\n            color=\"common.white\"\n          >\n            Please connect an Ethereum wallet to your browser to use the\n            application\n          </Typography>\n        </Paper>\n      </Container>\n\n      {/* <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>Uniswap v2 Interface</p>\n      </Grid> */}\n    </div>\n  );\n}\n\nexport default ConnectWalletPage;\n","export const networks = [133717];\n\nexport const ChainId = {\n  HYPERION_SEPOLIA: 133717,\n};\n\nexport const routerAddress = new Map();\nrouterAddress.set(\n  ChainId.HYPERION_SEPOLIA,\n  \"0xa1cF48c109f8B5eEe38B406591FE27f11f685a1f\"\n);\n","import { Contract, ethers } from \"ethers\";\nimport * as chains from \"./constants/chains\";\n\nconst ROUTER = require(\"./build/UniswapV2Router02.json\");\nconst ERC20 = require(\"./build/ERC20.json\");\nconst FACTORY = require(\"./build/IUniswapV2Factory.json\");\nconst PAIR = require(\"./build/IUniswapV2Pair.json\");\n\nexport function getProvider() {\n  return new ethers.providers.Web3Provider(window.ethereum);\n}\n\nexport function getSigner(provider) {\n  return provider.getSigner();\n}\n\nexport async function getNetwork(provider) {\n  const network = await provider.getNetwork();\n  return network.chainId;\n}\n\nexport function getRouter(address, signer) {\n  return new Contract(address, ROUTER.abi, signer);\n}\n\nexport async function checkNetwork(provider) {\n  const chainId = getNetwork(provider);\n  if (chains.networks.includes(chainId)) {\n    return true;\n  }\n  return false;\n}\n\nexport function getWeth(address, signer) {\n  return new Contract(address, ERC20.abi, signer);\n}\n\nexport function getFactory(address, signer) {\n  return new Contract(address, FACTORY.abi, signer);\n}\n\nexport async function getAccount() {\n  const accounts = await window.ethereum.request({\n    method: \"eth_requestAccounts\",\n  });\n\n  return accounts[0];\n}\n\n//This function checks if a ERC20 token exists for a given address\n//    `address` - The Ethereum address to be checked\n//    `signer` - The current signer\nexport function doesTokenExist(address, signer) {\n  try {\n    return new Contract(address, ERC20.abi, signer);\n  } catch (err) {\n    return false;\n  }\n}\n\nexport async function getDecimals(token) {\n  const decimals = await token\n    .decimals()\n    .then((result) => {\n      return result;\n    })\n    .catch((error) => {\n      console.log(\"No tokenDecimals function for this token, set to 0\");\n      return 0;\n    });\n  return decimals;\n}\n\n// This function returns an object with 2 fields: `balance` which container's the account's balance in the particular token,\n// and `symbol` which is the abbreviation of the token name. To work correctly it must be provided with 4 arguments:\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `address` - An Ethereum address of the token to check for (either a token or AUT)\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function getBalanceAndSymbol(\n  accountAddress,\n  address,\n  provider,\n  signer,\n  weth_address,\n  coins\n) {\n  try {\n    if (address === weth_address) {\n      const balanceRaw = await provider.getBalance(accountAddress);\n\n      return {\n        balance: ethers.utils.formatEther(balanceRaw),\n        symbol: coins[0].abbr,\n      };\n    } else {\n      const token = new Contract(address, ERC20.abi, signer);\n      const tokenDecimals = await getDecimals(token);\n      const balanceRaw = await token.balanceOf(accountAddress);\n      const symbol = await token.symbol();\n\n      return {\n        balance: balanceRaw * 10 ** -tokenDecimals,\n        symbol: symbol,\n      };\n    }\n  } catch (error) {\n    console.log(\"The getBalanceAndSymbol function had an error!\");\n    console.log(error);\n    return false;\n  }\n}\n\n// This function swaps two particular tokens / AUT, it can handle switching from AUT to ERC20 token, ERC20 token to AUT, and ERC20 token to ERC20 token.\n// No error handling is done, so any issues can be caught with the use of .catch()\n// To work correctly, there needs to be 7 arguments:\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\n//    `amount` - A float or similar number representing the value of address1's token to trade\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `signer` - The current signer\nexport async function swapTokens(\n  address1,\n  address2,\n  amount,\n  routerContract,\n  accountAddress,\n  signer\n) {\n  const tokens = [address1, address2];\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const tokenDecimals = await getDecimals(token1);\n\n  const amountIn = ethers.utils.parseUnits(amount, tokenDecimals);\n  const amountOut = await routerContract.callStatic.getAmountsOut(\n    amountIn,\n    tokens\n  );\n\n  await token1.approve(routerContract.address, amountIn);\n  const wethAddress = await routerContract.WETH();\n\n  if (address1 === wethAddress) {\n    // Eth -> Token\n    await routerContract.swapExactETHForTokens(\n      amountOut[1],\n      tokens,\n      accountAddress,\n      deadline,\n      { value: amountIn }\n    );\n  } else if (address2 === wethAddress) {\n    // Token -> Eth\n    await routerContract.swapExactTokensForETH(\n      amountIn,\n      amountOut[1],\n      tokens,\n      accountAddress,\n      deadline\n    );\n  } else {\n    await routerContract.swapExactTokensForTokens(\n      amountIn,\n      amountOut[1],\n      tokens,\n      accountAddress,\n      deadline\n    );\n  }\n}\n\n//This function returns the conversion rate between two token addresses\n//    `address1` - An Ethereum address of the token to swaped from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to swaped to (either a token or AUT)\n//    `amountIn` - Amount of the token at address 1 to be swaped from\n//    `routerContract` - The router contract to carry out this swap\nexport async function getAmountOut(\n  address1,\n  address2,\n  amountIn,\n  routerContract,\n  signer\n) {\n  try {\n    const token1 = new Contract(address1, ERC20.abi, signer);\n    const token1Decimals = await getDecimals(token1);\n\n    const token2 = new Contract(address2, ERC20.abi, signer);\n    const token2Decimals = await getDecimals(token2);\n\n    const values_out = await routerContract.getAmountsOut(\n      ethers.utils.parseUnits(String(amountIn), token1Decimals),\n      [address1, address2]\n    );\n    const amount_out = values_out[1] * 10 ** -token2Decimals;\n    console.log(\"amount out: \", amount_out);\n    return Number(amount_out);\n  } catch {\n    return false;\n  }\n}\n\n// This function calls the pair contract to fetch the reserves stored in a the liquidity pool between the token of address1 and the token\n// of address2. Some extra logic was needed to make sure that the results were returned in the correct order, as\n// `pair.getReserves()` would always return the reserves in the same order regardless of which order the addresses were.\n//    `address1` - An Ethereum address of the token to trade from (either a ERC20 token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a ERC20 token or AUT)\n//    `pair` - The pair contract for the two tokens\nexport async function fetchReserves(address1, address2, pair, signer) {\n  try {\n    // Get decimals for each coin\n    const coin1 = new Contract(address1, ERC20.abi, signer);\n    const coin2 = new Contract(address2, ERC20.abi, signer);\n\n    const coin1Decimals = await getDecimals(coin1);\n    const coin2Decimals = await getDecimals(coin2);\n\n    console.log(pair.address);\n\n    // Get reserves\n    const reservesRaw = await pair.getReserves();\n\n    // Put the results in the right order\n    const results = [\n      (await pair.token0()) === address1 ? reservesRaw[0] : reservesRaw[1],\n      (await pair.token1()) === address2 ? reservesRaw[1] : reservesRaw[0],\n    ];\n\n    // Scale each to the right decimal place\n    return [\n      results[0] * 10 ** -coin1Decimals,\n      results[1] * 10 ** -coin2Decimals,\n    ];\n  } catch (err) {\n    console.log(\"error!\");\n    console.log(err);\n    return [0, 0];\n  }\n}\n\n// This function returns the reserves stored in a the liquidity pool between the token of address1 and the token\n// of address2, as well as the liquidity tokens owned by accountAddress for that pair.\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\n//    `factory` - The current factory\n//    `signer` - The current signer\nexport async function getReserves(\n  address1,\n  address2,\n  factory,\n  signer,\n  accountAddress\n) {\n  try {\n    const pairAddress = await factory.getPair(address1, address2);\n    const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n    if (pairAddress !== \"0x0000000000000000000000000000000000000000\") {\n      const reservesRaw = await fetchReserves(address1, address2, pair, signer);\n      const liquidityTokens_BN = await pair.balanceOf(accountAddress);\n      const liquidityTokens = Number(\n        ethers.utils.formatEther(liquidityTokens_BN)\n      );\n\n      return [\n        reservesRaw[0].toPrecision(6),\n        reservesRaw[1].toPrecision(6),\n        liquidityTokens,\n      ];\n    } else {\n      console.log(\"no reserves yet\");\n      return [0, 0, 0];\n    }\n  } catch (err) {\n    console.log(\"error!\");\n    console.log(err);\n    return [0, 0, 0];\n  }\n}\n","import * as chains from \"./chains\";\n\n// If you add coins for a new network, make sure Weth address (for the router you are using) is the first entry\n\nconst HYPERION_SEPOLIACoins = [\n  {\n    name: \"Metis\",\n    abbr: \"METIS\",\n    address: \"0x94765A5Ad79aE18c6913449Bf008A0B5f247D301\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Dai\",\n    abbr: \"DAI\",\n    address: \"0xc4c33c42684ad16e84800c25d5dE7B650E9F95Ca\",\n  },\n  {\n    name: \"Wrapped Ethereum\",\n    abbr: \"WETH\",\n    address: \"0x9AB236Ec38492099a4d35552e6dC7D9442607f9A\",\n  },\n  {\n    name: \"Wrapped Bitcoin\",\n    abbr: \"WBTC\",\n    address: \"0x63d940F5b04235aba7E921a3b508aB1360D32706\",\n  },\n  {\n    name: \"Tether USD\",\n    abbr: \"USDT\",\n    address: \"0x3c099E287eC71b4AA61A7110287D715389329237\",\n  },\n];\n\nconst COINS = new Map();\nCOINS.set(chains.ChainId.HYPERION_SEPOLIA, HYPERION_SEPOLIACoins);\nexport default COINS;\n","import { useEffect, useState, useRef, useCallback } from \"react\";\nimport { ethers } from \"ethers\";\nimport ConnectWalletPage from \"./Components/connectWalletPage\";\nimport {\n  getAccount,\n  getFactory,\n  getRouter,\n  getNetwork,\n  getWeth,\n} from \"./ethereumFunctions\";\nimport COINS from \"./constants/coins\";\nimport * as chains from \"./constants/chains\";\n\nconst Web3Provider = (props) => {\n  const [isConnected, setConnected] = useState(true);\n  let network = Object.create({});\n  network.provider = useRef(null);\n  network.signer = useRef(null);\n  network.account = useRef(null);\n  network.coins = [];\n  network.chainID = useRef(null);\n  network.router = useRef(null);\n  network.factory = useRef(null);\n  network.weth = useRef(null);\n  const backgroundListener = useRef(null);\n\n  const setupConnection = useCallback(async () => {\n    try {\n      console.log(\"lets go!\");\n      network.provider = new ethers.providers.Web3Provider(window.ethereum);\n      network.signer = await network.provider.getSigner();\n      await getAccount().then(async (result) => {\n        network.account = result;\n      });\n\n      await getNetwork(network.provider).then(async (chainId) => {\n        // Set chainID\n        network.chainID = chainId;\n        if (chains.networks.includes(chainId)) {\n          // Get the router using the chainID\n          network.router = await getRouter(\n            chains.routerAddress.get(chainId),\n            network.signer\n          );\n          // Get the default coins for the chain\n          network.coins = COINS.get(chainId);\n          // Get the WETH address for the chain\n          const wethAddress = network.coins[0].address;\n          network.weth = getWeth(wethAddress, network.signer);\n          // Set the value of the weth address in the default coins array\n          network.coins[0].address = wethAddress;\n          // Get the factory address from the router\n          await network.router.factory().then((factory_address) => {\n            network.factory = getFactory(factory_address, network.signer);\n          });\n          setConnected(true);\n        } else {\n          console.log(\"Wrong network mate.\");\n          setConnected(false);\n        }\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  }, [network]);\n\n  const createListener = useCallback(() => {\n    return setInterval(async () => {\n      // console.log(\"Heartbeat\");\n      try {\n        // Check the account has not changed\n        const account = await getAccount();\n        if (account !== network.account) {\n          await setupConnection();\n        }\n        // const chainID = await getNetwork(network.provider);\n        // if (chainID !== network.chainID){\n        //   setConnected(false);\n        //   await setupConnection();\n        // }\n      } catch (e) {\n        setConnected(false);\n        await setupConnection();\n      }\n    }, 1000);\n  }, [network, setupConnection]);\n\n  useEffect(() => {\n    async function initialSetup() {\n      // Initial setup\n      console.log(\"Initial hook\");\n      await setupConnection();\n      console.log(\"network: \", network);\n\n      // Start background listener\n      if (backgroundListener.current != null) {\n        clearInterval(backgroundListener.current);\n      }\n      const listener = createListener();\n      backgroundListener.current = listener;\n    }\n    initialSetup();\n    return () => clearInterval(backgroundListener.current);\n  }, [createListener, network, setupConnection]);\n\n  const renderNotConnected = () => {\n    console.log(\"Rendering\");\n    return (\n      <div className=\"App\">\n        <div>\n          <ConnectWalletPage />\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      {!isConnected && renderNotConnected()}\n      {isConnected && <div> {props.render(network)}</div>}\n    </>\n  );\n};\n\nexport default Web3Provider;\n","export const MenuItems = [\n  {\n    title: \"Swap\",\n    url: \"/\",\n    cName: \"nav-links\",\n  },\n  {\n    title: \"Liquidity\",\n    url: \"/liquidity\",\n    cName: \"nav-links\",\n  },\n];\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { MenuItems } from \"./MenuItems\";\nimport \"./NavBar.css\";\nimport { useLocation } from \"react-router-dom\";\n\nfunction NavBar() {\n  const location = useLocation();\n  return (\n    <nav className=\"mainNav\">\n      {/* <div className=\"Title\">\n        <h1 className=\"navbar-logo\">\n          Alternative Uniswap Interface\n        </h1>\n      </div> */}\n\n      <div className=\"NavbarItems\">\n        <ul className={`nav-menu`}>\n          {MenuItems.map((item, index) => {\n            const isActive = location.pathname === item.url;\n            return (\n              <li key={index}>\n                <Link\n                  className={\n                    isActive ? \"nav-links nav-links-clicked\" : \"nav-links\"\n                  }\n                  to={item.url}\n                >\n                  {item.title}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </nav>\n  );\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport { Fab, Grid, InputBase, makeStyles } from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport PropTypes from \"prop-types\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(1),\n    minHeight: \"80px\",\n    backgroundColor: \"#263238\",\n    borderRadius: theme.spacing(2),\n    borderColor: \"#263238\",\n    borderWidth: \"1px\",\n    borderStyle: \"solid\",\n  },\n  container_input: {\n    padding: theme.spacing(1),\n    minHeight: \"68px\",\n    backgroundColor: \"#263238\",\n    borderRadius: theme.spacing(2),\n    borderColor: \"#263238\",\n    borderWidth: \"1px\",\n    borderStyle: \"solid\",\n    marginLeft: \"50%\",\n    textAlign: \"right\",\n  },\n  container_blank: {\n    padding: theme.spacing(1),\n    minHeight: \"80px\",\n    borderRadius: theme.spacing(2),\n  },\n  grid: {\n    height: \"60px\",\n  },\n  fab: {\n    zIndex: \"0\",\n  },\n  input: {\n    ...theme.typography.h5,\n    width: \"100%\",\n    backgroundColor: \"#263238\", // Light grey background\n    color: \"#fff\", // Dark text for readability\n    borderRadius: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  inputBase: {\n    textAlign: \"right\",\n    backgroundColor: \"#263238\", // Light grey background\n    color: \"#fff\", // Dark text for readability\n    borderRadius: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n}));\n\nCoinField.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  symbol: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  activeField: PropTypes.bool.isRequired,\n};\n\nexport function RemoveLiquidityField1(props) {\n  // This component is used to selecting a coin and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol, value, onChange, activeField } = props;\n  return (\n    <div className={classes.container_blank}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n        {/* Text Field */}\n        <Grid item xs={9}>\n          <InputBase\n            value={value}\n            onChange={onChange}\n            placeholder=\"0.0\"\n            disabled={!activeField}\n            classes={{\n              root: classes.container_input,\n              input: classes.inputBase,\n            }}\n          />\n        </Grid>\n        {/* </div> */}\n      </Grid>\n    </div>\n  );\n}\n\nexport function RemoveLiquidityField2(props) {\n  // This component is used to selecting a coin and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol } = props;\n\n  return (\n    <div className={classes.container_blank}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default function CoinField(props) {\n  // This component is used to selecting a token and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol, value, onChange, activeField } = props;\n\n  return (\n    <div className={classes.container}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={4}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n\n        {/* Text Field */}\n        <Grid item xs={8}>\n          <InputBase\n            value={value}\n            onChange={onChange}\n            placeholder=\"0.0\"\n            disabled={!activeField}\n            classes={{ root: classes.input, input: classes.inputBase }}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { ButtonBase, Grid, makeStyles, Typography } from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    width: \"100%\",\n    paddingTop: theme.spacing(0.5),\n    paddingBottom: theme.spacing(0.5),\n    color: \"#fff\", // Softer light gray text\n    backgroundColor: \"#263238\", // Much darker blue-gray\n    borderRadius: theme.spacing(1),\n    \"&:hover, &$focusVisible\": {\n      backgroundColor: \"#11171a\", // Even darker on hover\n    },\n  },\n  coinName: {\n    opacity: 0.8,\n    color: \"#e0e0e0\", // Softer light gray for coin name\n  },\n}));\n\nCoinButton.propTypes = {\n  coinName: PropTypes.string.isRequired,\n  coinAbbr: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default function CoinButton(props) {\n  const { coinName, coinAbbr, onClick } = props;\n  const classes = useStyles();\n\n  return (\n    <ButtonBase focusRipple className={classes.button} onClick={onClick}>\n      <Grid container direction=\"column\">\n        <Typography variant=\"h6\">{coinAbbr}</Typography>\n        <Typography variant=\"body2\" className={classes.coinName}>\n          {coinName}\n        </Typography>\n      </Grid>\n    </ButtonBase>\n  );\n}\n","import React from \"react\";\nimport {\n  Button,\n  Dialog,\n  Grid,\n  IconButton,\n  makeStyles,\n  TextField,\n  Typography,\n  withStyles,\n} from \"@material-ui/core\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport CoinButton from \"./CoinButton\";\nimport { doesTokenExist } from \"../ethereumFunctions\";\nimport PropTypes from \"prop-types\";\n\nconst styles = (theme) => ({\n  dialogContainer: {\n    borderRadius: theme.spacing(2),\n  },\n  titleSection: {\n    padding: theme.spacing(2),\n  },\n  titleText: {\n    alignSelf: \"center\",\n  },\n  hr: {\n    margin: 0,\n  },\n  address: {\n    paddingLeft: theme.spacing(2.5),\n    paddingRight: theme.spacing(2.5),\n    paddingBottom: theme.spacing(2),\n  },\n  coinList: {\n    height: \"300px\",\n    overflowY: \"scroll\",\n  },\n  coinContainer: {\n    paddingLeft: theme.spacing(0.5),\n    paddingRight: theme.spacing(0.5),\n    paddingTop: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    overflow: \"hidden\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\n// This is a modified version of MaterialUI's DialogTitle component, I've added a close button in the top right corner\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle\n      disableTypography\n      className={classes.titleSection}\n      {...other}\n    >\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignContent=\"center\"\n      >\n        <Typography variant=\"h6\" className={classes.titleText}>\n          {children}\n        </Typography>\n        {onClose ? (\n          <IconButton\n            aria-label=\"close\"\n            onClick={onClose}\n            style={{ color: \"#fff\" }}\n          >\n            <CloseIcon />\n          </IconButton>\n        ) : null}\n      </Grid>\n    </MuiDialogTitle>\n  );\n});\n\n// This is a modified version of MaterialUI's DialogActions component, the color has been changed by modifying the CSS\nconst DialogActions = withStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n    backgroundColor: \"#10141A\",\n  },\n}))(MuiDialogActions);\n\nCoinDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  coins: PropTypes.array.isRequired,\n};\n\nexport default function CoinDialog(props) {\n  // The CoinDialog component will display a dialog window on top of the page, allowing a user to select a coin\n  // from a list (list can be found in 'src/constants/coins.js') or enter an address into a search field. Any entered\n  // addresses will first be validated to make sure they exist.\n  // When the dialog closes, it will call the `onClose` prop with 1 argument which will either be undefined (if the\n  // user closes the dialog without selecting anything), or will be a string containing the address of a coin.\n\n  const classes = useStyles();\n  const { onClose, open, coins, signer } = props;\n\n  const [address, setAddress] = React.useState(\"\");\n  const [error, setError] = React.useState(\"\");\n\n  // Called when the user tries to input a custom address, this function will validate the address and will either\n  // then close the dialog and return the validated address, or will display an error.\n  const submit = () => {\n    if (doesTokenExist(address, signer)) {\n      exit(address);\n    } else {\n      setError(\"This address is not valid\");\n    }\n  };\n\n  // Resets any fields in the dialog (in case it's opened in the future) and calls the `onClose` prop\n  const exit = (value) => {\n    setError(\"\");\n    setAddress(\"\");\n    onClose(value);\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={() => exit(undefined)}\n      fullWidth\n      maxWidth=\"sm\"\n      classes={{ paper: classes.dialogContainer }}\n    >\n      <DialogTitle onClose={() => exit(undefined)}>\n        <span style={{ color: \"#fff\" }}>Select Coin</span>\n      </DialogTitle>\n\n      <hr className={classes.hr} />\n\n      <div className={classes.coinContainer}>\n        <Grid container direction=\"column\" spacing={1} alignContent=\"center\">\n          <TextField\n            value={address}\n            onChange={(e) => setAddress(e.target.value)}\n            variant=\"outlined\"\n            placeholder=\"Paste Address\"\n            error={error !== \"\"}\n            helperText={error}\n            fullWidth\n            className={classes.address}\n            InputProps={{ style: { color: \"#fff\" } }}\n            InputLabelProps={{ style: { color: \"#fff\" } }}\n            FormHelperTextProps={{ style: { color: \"#fff\" } }}\n          />\n\n          <hr className={classes.hr} />\n\n          <Grid item className={classes.coinList}>\n            <Grid container direction=\"column\">\n              {/* Maps all of the tokens in the constants file to buttons */}\n              {coins.map((coin, index) => (\n                <Grid item key={index} xs={12}>\n                  <CoinButton\n                    coinName={coin.name}\n                    coinAbbr={coin.abbr}\n                    onClick={() => exit(coin.address)}\n                  />\n                </Grid>\n              ))}\n            </Grid>\n          </Grid>\n        </Grid>\n      </div>\n\n      <hr className={classes.hr} />\n\n      <DialogActions>\n        <Button autoFocus onClick={submit} color=\"primary\">\n          <span style={{ color: \"#fff\", fontWeight: 600 }}>Enter</span>\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React from \"react\";\nimport { Button, CircularProgress, makeStyles } from \"@material-ui/core\";\nimport green from \"@material-ui/core/colors/green\";\n\nconst useStyles = makeStyles((theme) => ({\n  wrapper: {\n    margin: 0,\n    position: \"relative\",\n  },\n  progress: {\n    color: green[500],\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    marginTop: -12,\n    marginLeft: -12,\n  },\n  disabledButton: {\n    backgroundColor: theme.palette.secondary.main + \" !important\",\n    color: theme.palette.secondary.contrastText + \" !important\",\n  },\n}));\n\nexport default function LoadingButton(props) {\n  const classes = useStyles();\n  const { children, loading, valid, success, fail, onClick, ...other } = props;\n  return (\n    <div className={classes.wrapper}>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        fullWidth\n        disabled={loading || !valid}\n        type=\"submit\"\n        onClick={onClick}\n        classes={{ disabled: classes.disabledButton }}\n        {...other}\n      >\n        {children}\n      </Button>\n      {loading && <CircularProgress size={24} className={classes.progress} />}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Dialog, makeStyles } from \"@material-ui/core\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\n\nconst styles = (theme) => ({\n  dialogContainer: {\n    borderRadius: theme.spacing(2),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nexport default function WrongNetwork(props) {\n  const classes = useStyles();\n  const { open } = props;\n  return (\n    <Dialog\n      open={open}\n      fullWidth\n      maxWidth=\"sm\"\n      classes={{ paper: classes.dialogContainer }}\n    >\n      <MuiDialogTitle>Unsupported Network</MuiDialogTitle>\n    </Dialog>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport {\n  Container,\n  Grid,\n  IconButton,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport SwapVerticalCircleIcon from \"@material-ui/icons/SwapVerticalCircle\";\nimport { useSnackbar } from \"notistack\";\nimport LoopIcon from \"@material-ui/icons/Loop\";\nimport {\n  getAmountOut,\n  getBalanceAndSymbol,\n  swapTokens,\n  getReserves,\n} from \"../ethereumFunctions\";\nimport CoinField from \"./CoinField\";\nimport CoinDialog from \"./CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n  },\n  switchButton: {\n    zIndex: 1,\n    margin: \"-16px\",\n    padding: theme.spacing(0.5),\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n    color: theme.palette.primary.contrastText,\n    fontWeight: 600,\n  },\n  footer: {\n    marginTop: \"285px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction CoinSwapper(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen] = React.useState(false);\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setField1Value(field2Value);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n    // If both coins have been selected, and a valid float has been entered which is less than the user's balance, then return true\n    const parsedInput1 = parseFloat(field1Value);\n    const parsedInput2 = parseFloat(field2Value);\n    return (\n      coin1.address &&\n      coin2.address &&\n      !isNaN(parsedInput1) &&\n      !isNaN(parsedInput2) &&\n      0 < parsedInput1 &&\n      parsedInput1 <= coin1.balance\n    );\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(\n        props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n      ).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(\n        props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n      ).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Calls the swapTokens Ethereum function to make the swap, then resets nessicary state variables\n  const swap = () => {\n    console.log(\"Attempting to swap tokens...\");\n    setLoading(true);\n\n    swapTokens(\n      coin1.address,\n      coin2.address,\n      field1Value,\n      props.network.router,\n      props.network.account,\n      props.network.signer\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\n  // are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\n  // the lambda will only ever be called when the component mounts. These are very useful for calculating new values\n  // after a particular state change, for example, calculating the new exchange rate whenever the addresses\n  // of the two coins change.\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get Reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address) {\n      getReserves(\n        coin1.address,\n        coin2.address,\n        props.network.factory,\n        props.network.signer,\n        props.network.account\n      ).then((data) => setReserves(data));\n    }\n  }, [\n    coin1.address,\n    coin2.address,\n    props.network.account,\n    props.network.factory,\n    props.network.router,\n    props.network.signer,\n  ]);\n\n  // This hook is called when either of the state variables `field1Value` `coin1.address` or `coin2.address` change.\n  // It attempts to calculate and set the state variable `field2Value`\n  // This means that if the user types a new value into the conversion box or the conversion rate changes,\n  // the value in the output box will change.\n  useEffect(() => {\n    if (isNaN(parseFloat(field1Value))) {\n      setField2Value(\"\");\n    } else if (parseFloat(field1Value) && coin1.address && coin2.address) {\n      getAmountOut(\n        coin1.address,\n        coin2.address,\n        field1Value,\n        props.network.router,\n        props.network.signer\n      )\n        .then((amount) => setField2Value(amount.toFixed(7)))\n        .catch((e) => {\n          console.log(e);\n          setField2Value(\"NA\");\n        });\n    } else {\n      setField2Value(\"\");\n    }\n  }, [\n    field1Value,\n    coin1.address,\n    coin2.address,\n    props.network.router,\n    props.network.signer,\n  ]);\n\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n  useEffect(() => {\n    const coinTimeout = setTimeout(() => {\n      console.log(\"props: \", props);\n      console.log(\"Checking balances...\");\n\n      if (coin1.address && coin2.address && props.network.account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          props.network.factory,\n          props.network.signer,\n          props.network.account\n        ).then((data) => setReserves(data));\n      }\n\n      if (coin1.address && props.network.account && !wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin1.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n        ).then((data) => {\n          setCoin1({\n            ...coin1,\n            balance: data.balance,\n          });\n        });\n      }\n      if (coin2.address && props.network.account && !wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin2.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n        ).then((data) => {\n          setCoin2({\n            ...coin2,\n            balance: data.balance,\n          });\n        });\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  return (\n    <div>\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={props.network.coins}\n        props={props.network.signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={props.network.coins}\n        signer={props.network.signer}\n      />\n      <WrongNetwork open={wrongNetworkOpen} />\n\n      {/* Coin Swapper */}\n      <Container maxWidth=\"xs\">\n        <Paper className={classes.paperContainer}>\n          <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n            <Grid item xs={12} className={classes.fullWidth}>\n              <CoinField\n                activeField={true}\n                value={field1Value}\n                onClick={() => setDialog1Open(true)}\n                onChange={handleChange.field1}\n                symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n              />\n            </Grid>\n\n            <IconButton\n              onClick={switchFields}\n              className={classes.switchButton}\n              style={{ color: \"#9f9f9f\" }}\n            >\n              <SwapVerticalCircleIcon fontSize=\"medium\" />\n            </IconButton>\n\n            <Grid item xs={12} className={classes.fullWidth}>\n              <CoinField\n                activeField={false}\n                value={field2Value}\n                onClick={() => setDialog2Open(true)}\n                symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n              />\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Balance Display */}\n            <Typography variant=\"h6\" style={{ color: \"#fff\" }}>\n              Your Balances\n            </Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography\n                  variant=\"body1\"\n                  className={classes.balance}\n                  style={{ color: \"#9f9f9f\" }}\n                >\n                  {formatBalance(coin1.balance, coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography\n                  variant=\"body1\"\n                  className={classes.balance}\n                  style={{ color: \"#9f9f9f\" }}\n                >\n                  {formatBalance(coin2.balance, coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Reserves Display */}\n            <Typography variant=\"h6\" style={{ color: \"#fff\" }}>\n              Reserves\n            </Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography\n                  variant=\"body1\"\n                  className={classes.balance}\n                  style={{ color: \"#9f9f9f\" }}\n                >\n                  {formatReserve(reserves[0], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography\n                  variant=\"body1\"\n                  className={classes.balance}\n                  style={{ color: \"#9f9f9f\" }}\n                >\n                  {formatReserve(reserves[1], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            <LoadingButton\n              loading={loading}\n              valid={isButtonEnabled()}\n              success={false}\n              fail={false}\n              onClick={swap}\n              style={{ color: \"#000\" }}\n            >\n              <LoopIcon />\n              <span style={{ fontWeight: 600 }}>Swap</span>\n            </LoadingButton>\n          </Grid>\n        </Paper>\n      </Container>\n\n      {/* <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n        Alternative Uniswap Interface | Get AUT for use in the bakerloo testnet{\" \"}\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\n        </p>\n      </Grid> */}\n    </div>\n  );\n}\n\nexport default CoinSwapper;\n","import React from \"react\";\nimport { ButtonGroup, Button } from \"@material-ui/core\";\n\nexport default function SwitchButton(props) {\n  const { setDeploy } = props;\n\n  const changeStyles = (K) => {\n    if (K === true) {\n      let add_button = document.getElementById(\"add-button\");\n      add_button.style.backgroundColor = \"#00CFFF\";\n      add_button.style.color = \"#000\";\n\n      let remove_button = document.getElementById(\"remove-button\");\n      remove_button.style.backgroundColor = \"#000000\";\n      remove_button.style.color = \"#fff\";\n    } else {\n      let remove_button = document.getElementById(\"remove-button\");\n      remove_button.style.backgroundColor = \"#00CFFF\";\n      remove_button.style.color = \"#000\";\n\n      let add_button = document.getElementById(\"add-button\");\n      add_button.style.backgroundColor = \"#000000\";\n      add_button.style.color = \"#fff\";\n    }\n  };\n\n  return (\n    <div>\n      <ButtonGroup size=\"large\" variant=\"contained\">\n        <Button\n          id=\"add-button\"\n          color=\"primary\"\n          text=\"white\"\n          onClick={() => {\n            setDeploy(true);\n            changeStyles(true);\n          }}\n        >\n          Deploy Liquidity\n        </Button>\n\n        <Button\n          id=\"remove-button\"\n          color=\"secondary\"\n          text=\"white\"\n          onClick={() => {\n            setDeploy(false);\n            changeStyles(false);\n          }}\n          style={{ color: \"#fff\" }}\n        >\n          Remove Liquidity\n        </Button>\n      </ButtonGroup>\n    </div>\n  );\n}\n","import { Contract, ethers } from \"ethers\";\nimport { fetchReserves, getDecimals } from \"../ethereumFunctions\";\n\nconst ERC20 = require(\"../build/ERC20.json\");\nconst PAIR = require(\"../build/IUniswapV2Pair.json\");\n\n// Function used to add Liquidity to any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the coin to add from (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to add to (either a token or AUT)\n//    `amount1` - A float or similar number representing the value of address1's coin to add\n//    `amount2` - A float or similar number representing the value of address2's coin to add\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to add\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to add\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function addLiquidity(\n  address1,\n  address2,\n  amount1,\n  amount2,\n  amount1min,\n  amount2min,\n  routerContract,\n  account,\n  signer\n) {\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const token2 = new Contract(address2, ERC20.abi, signer);\n\n  const token1Decimals = await getDecimals(token1);\n  const token2Decimals = await getDecimals(token2);\n\n  const amountIn1 = ethers.utils.parseUnits(amount1, token1Decimals);\n  const amountIn2 = ethers.utils.parseUnits(amount2, token2Decimals);\n\n  const amount1Min = ethers.utils.parseUnits(amount1min, token1Decimals);\n  const amount2Min = ethers.utils.parseUnits(amount2min, token2Decimals);\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  await token1.approve(routerContract.address, amountIn1);\n  await token2.approve(routerContract.address, amountIn2);\n\n  const wethAddress = await routerContract.WETH();\n\n  console.log([\n    address1,\n    address2,\n    amountIn1,\n    amountIn2,\n    amount1Min,\n    amount2Min,\n    account,\n    deadline,\n  ]);\n\n  if (address1 === wethAddress) {\n    // Eth + Token\n    await routerContract.addLiquidityETH(\n      address2,\n      amountIn2,\n      amount2Min,\n      amount1Min,\n      account,\n      deadline,\n      { value: amountIn1 }\n    );\n  } else if (address2 === wethAddress) {\n    // Token + Eth\n    await routerContract.addLiquidityETH(\n      address1,\n      amountIn1,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline,\n      { value: amountIn2 }\n    );\n  } else {\n    // Token + Token\n    await routerContract.addLiquidity(\n      address1,\n      address2,\n      amountIn1,\n      amountIn2,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  }\n}\n\n// Function used to remove Liquidity from any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `liquidity_tokens` - A float or similar number representing the value of liquidity tokens you will burn to get tokens back\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to recieve\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to recieve\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function removeLiquidity(\n  address1,\n  address2,\n  liquidity_tokens,\n  amount1min,\n  amount2min,\n  routerContract,\n  account,\n  signer,\n  factory\n) {\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const token2 = new Contract(address2, ERC20.abi, signer);\n\n  const token1Decimals = await getDecimals(token1);\n  const token2Decimals = await getDecimals(token2);\n\n  const Getliquidity = (liquidity_tokens) => {\n    if (liquidity_tokens < 0.001) {\n      return ethers.BigNumber.from(liquidity_tokens * 10 ** 18);\n    }\n    return ethers.utils.parseUnits(String(liquidity_tokens), 18);\n  };\n\n  const liquidity = Getliquidity(liquidity_tokens);\n  console.log(\"liquidity: \", liquidity);\n\n  const amount1Min = ethers.utils.parseUnits(\n    String(amount1min),\n    token1Decimals\n  );\n  const amount2Min = ethers.utils.parseUnits(\n    String(amount2min),\n    token2Decimals\n  );\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const wethAddress = await routerContract.WETH();\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  await pair.approve(routerContract.address, liquidity);\n\n  console.log([\n    address1,\n    address2,\n    Number(liquidity),\n    Number(amount1Min),\n    Number(amount2Min),\n    account,\n    deadline,\n  ]);\n\n  if (address1 === wethAddress) {\n    // Eth + Token\n    await routerContract.removeLiquidityETH(\n      address2,\n      liquidity,\n      amount2Min,\n      amount1Min,\n      account,\n      deadline\n    );\n  } else if (address2 === wethAddress) {\n    // Token + Eth\n    await routerContract.removeLiquidityETH(\n      address1,\n      liquidity,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  } else {\n    // Token + Token\n    await routerContract.removeLiquidity(\n      address1,\n      address2,\n      liquidity,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  }\n}\n\nconst quote = (amount1, reserve1, reserve2) => {\n  const amount2 = amount1 * (reserve2 / reserve1);\n  return [amount2];\n};\n\n// Function used to get a quote of the liquidity addition\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `amountA_desired` - The prefered value of the first token that the user would like to deploy as liquidity\n//    `amountB_desired` - The prefered value of the second token that the user would like to deploy as liquidity\n//    `factory` - The current factory\n//    `signer` - The current signer\n\nasync function quoteMintLiquidity(\n  address1,\n  address2,\n  amountA,\n  amountB,\n  factory,\n  signer\n) {\n  const MINIMUM_LIQUIDITY = 1000;\n  let _reserveA = 0;\n  let _reserveB = 0;\n  let totalSupply = 0;\n  [_reserveA, _reserveB, totalSupply] = await factory\n    .getPair(address1, address2)\n    .then(async (pairAddress) => {\n      if (pairAddress !== \"0x0000000000000000000000000000000000000000\") {\n        const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n        const reservesRaw = await fetchReserves(\n          address1,\n          address2,\n          pair,\n          signer\n        ); // Returns the reserves already formated as ethers\n        const reserveA = reservesRaw[0];\n        const reserveB = reservesRaw[1];\n\n        const _totalSupply = await pair.totalSupply();\n        const totalSupply = Number(ethers.utils.formatEther(_totalSupply));\n        return [reserveA, reserveB, totalSupply];\n      } else {\n        return [0, 0, 0];\n      }\n    });\n\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const token2 = new Contract(address2, ERC20.abi, signer);\n\n  // Need to do all this decimals work to account for 0 decimal numbers\n\n  const token1Decimals = await getDecimals(token1);\n  const token2Decimals = await getDecimals(token2);\n\n  const valueA = amountA * 10 ** token1Decimals;\n  const valueB = amountB * 10 ** token2Decimals;\n\n  const reserveA = _reserveA * 10 ** token1Decimals;\n  const reserveB = _reserveB * 10 ** token2Decimals;\n\n  if (totalSupply === 0) {\n    return Math.sqrt(valueA * valueB - MINIMUM_LIQUIDITY) * 10 ** -18;\n  }\n\n  return Math.min(\n    (valueA * totalSupply) / reserveA,\n    (valueB * totalSupply) / reserveB\n  );\n}\n\nexport async function quoteAddLiquidity(\n  address1,\n  address2,\n  amountADesired,\n  amountBDesired,\n  factory,\n  signer\n) {\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\n  const reserveA = reservesRaw[0];\n  const reserveB = reservesRaw[1];\n\n  if (reserveA === 0 && reserveB === 0) {\n    const amountOut = await quoteMintLiquidity(\n      address1,\n      address2,\n      amountADesired,\n      amountBDesired,\n      factory,\n      signer\n    );\n    return [amountADesired, amountBDesired, amountOut.toPrecision(8)];\n  } else {\n    const amountBOptimal = quote(amountADesired, reserveA, reserveB);\n    if (amountBOptimal <= amountBDesired) {\n      const amountOut = await quoteMintLiquidity(\n        address1,\n        address2,\n        amountADesired,\n        amountBOptimal,\n        factory,\n        signer\n      );\n      return [amountADesired, amountBOptimal, amountOut.toPrecision(8)];\n    } else {\n      const amountAOptimal = quote(amountBDesired, reserveB, reserveA);\n      const amountOut = await quoteMintLiquidity(\n        address1,\n        address2,\n        amountAOptimal,\n        amountBDesired,\n        factory,\n        signer\n      );\n      return [amountAOptimal, amountBDesired, amountOut.toPrecision(8)];\n    }\n  }\n}\n\n// Function used to get a quote of the liquidity removal\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `liquidity` - The amount of liquidity tokens the user will burn to get their tokens back\n//    `factory` - The current factory\n//    `signer` - The current signer\n\nexport async function quoteRemoveLiquidity(\n  address1,\n  address2,\n  liquidity,\n  factory,\n  signer\n) {\n  const pairAddress = await factory.getPair(address1, address2);\n  console.log(\"pair address\", pairAddress);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\n  const reserveA = reservesRaw[0];\n  const reserveB = reservesRaw[1];\n\n  const feeOn =\n    (await factory.feeTo()) !== 0x0000000000000000000000000000000000000000;\n\n  const _kLast = await pair.kLast();\n  const kLast = Number(ethers.utils.formatEther(_kLast));\n\n  const _totalSupply = await pair.totalSupply();\n  let totalSupply = Number(ethers.utils.formatEther(_totalSupply));\n\n  if (feeOn && kLast > 0) {\n    const feeLiquidity =\n      (totalSupply * (Math.sqrt(reserveA * reserveB) - Math.sqrt(kLast))) /\n      (5 * Math.sqrt(reserveA * reserveB) + Math.sqrt(kLast));\n    totalSupply = totalSupply + feeLiquidity;\n  }\n\n  const Aout = (reserveA * liquidity) / totalSupply;\n  const Bout = (reserveB * liquidity) / totalSupply;\n\n  return [liquidity, Aout, Bout];\n}\n","import React, { useEffect, useCallback } from \"react\";\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport AccountBalanceIcon from \"@material-ui/icons/AccountBalance\";\nimport { useSnackbar } from \"notistack\";\nimport { getBalanceAndSymbol, getReserves } from \"../ethereumFunctions\";\n\nimport { addLiquidity, quoteAddLiquidity } from \"./LiquidityFunctions\";\n\nimport CoinField from \"../CoinSwapper/CoinField\";\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(3),\n    width: \"40%\",\n    overflow: \"wrap\",\n    background: \"#00CFFF\",\n    color: \"white\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  values: {\n    width: \"50%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction LiquidityDeployer(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen] = React.useState(false);\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Stores the user's balance of liquidity tokens for the current pair\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\");\n\n  // Used when getting a quote of liquidity\n  const [liquidityOut, setLiquidityOut] = React.useState([0, 0, 0]);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    let oldField1Value = field1Value;\n    let oldField2Value = field2Value;\n\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setField1Value(oldField2Value);\n    setField2Value(oldField1Value);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n    field2: (e) => {\n      setField2Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = useCallback(() => {\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n    const parsedInput1 = parseFloat(field1Value);\n    const parsedInput2 = parseFloat(field2Value);\n    return (\n      coin1.address &&\n      coin2.address &&\n      !isNaN(parsedInput1) &&\n      0 < parsedInput1 &&\n      !isNaN(parsedInput2) &&\n      0 < parsedInput2 &&\n      parsedInput1 <= coin1.balance &&\n      parsedInput2 <= coin2.balance\n    );\n  }, [\n    coin1.address,\n    coin1.balance,\n    coin2.address,\n    coin2.balance,\n    field1Value,\n    field2Value,\n  ]);\n\n  const deploy = () => {\n    console.log(\"Attempting to deploy liquidity...\");\n    setLoading(true);\n\n    addLiquidity(\n      coin1.address,\n      coin2.address,\n      field1Value,\n      field2Value,\n      \"0\",\n      \"0\",\n      props.network.router,\n      props.network.account,\n      props.network.signer\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        setField2Value(\"\");\n        enqueueSnackbar(\"Deployment Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(\n        props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n      ).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(\n        props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n      ).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address && props.network.account) {\n      getReserves(\n        coin1.address,\n        coin2.address,\n        props.network.factory,\n        props.network.signer,\n        props.network.account\n      ).then((data) => {\n        setReserves([data[0], data[1]]);\n        setLiquidityTokens(data[2]);\n      });\n    }\n  }, [\n    coin1.address,\n    coin2.address,\n    props.network.account,\n    props.network.factory,\n    props.network.signer,\n  ]);\n\n  // This hook is called when either of the state variables `field1Value`, `field2Value`, `coin1.address` or `coin2.address` change.\n  // It will give a preview of the liquidity deployment.\n  useEffect(() => {\n    if (isButtonEnabled()) {\n      console.log(\"Trying to preview the liquidity deployment\");\n\n      quoteAddLiquidity(\n        coin1.address,\n        coin2.address,\n        field1Value,\n        field2Value,\n        props.network.factory,\n        props.network.signer\n      ).then((data) => {\n        // console.log(data);\n        console.log(\"TokenA in: \", data[0]);\n        console.log(\"TokenB in: \", data[1]);\n        console.log(\"Liquidity out: \", data[2]);\n        setLiquidityOut([data[0], data[1], data[2]]);\n      });\n    }\n  }, [\n    coin1.address,\n    coin2.address,\n    field1Value,\n    field2Value,\n    props.network.factory,\n    props.network.signer,\n    isButtonEnabled,\n  ]);\n\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n  useEffect(() => {\n    const coinTimeout = setTimeout(() => {\n      console.log(\"Checking balances & Getting reserves...\");\n\n      if (coin1.address && coin2.address && props.network.account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          props.network.factory,\n          props.network.signer,\n          props.network.account\n        ).then((data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        });\n      }\n\n      if (coin1.address && props.network.account && !wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin1.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n        ).then((data) => {\n          setCoin1({\n            ...coin1,\n            balance: data.balance,\n          });\n        });\n      }\n      if (coin2.address && props.network.account && !wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin2.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n        ).then((data) => {\n          setCoin2({\n            ...coin2,\n            balance: data.balance,\n          });\n        });\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  return (\n    <div>\n      {/* Liquidity deployer */}\n      <Typography variant=\"h5\" className={classes.title}></Typography>\n\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={props.network.coins}\n        signer={props.network.signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={props.network.coins}\n        signer={props.networksigner}\n      />\n      <WrongNetwork open={wrongNetworkOpen} />\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <Grid item xs={12} className={classes.fullWidth}>\n          <CoinField\n            activeField={true}\n            value={field1Value}\n            onClick={() => setDialog1Open(true)}\n            onChange={handleChange.field1}\n            symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.fullWidth}>\n          <CoinField\n            activeField={true}\n            value={field2Value}\n            onClick={() => setDialog2Open(true)}\n            onChange={handleChange.field2}\n            symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n          />\n        </Grid>\n      </Grid>\n\n      <Grid\n        container\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        spacing={4}\n        className={classes.balance}\n      >\n        <hr className={classes.hr} />\n        <Grid\n          container\n          item\n          className={classes.values}\n          direction=\"column\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          {/* Balance Display */}\n          <Typography variant=\"h6\" style={{ color: \"#fff\" }}>\n            Your Balances\n          </Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography\n                variant=\"body1\"\n                className={classes.balance}\n                style={{ color: \"#9f9f9f\" }}\n              >\n                {formatBalance(coin1.balance, coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography\n                variant=\"body1\"\n                className={classes.balance}\n                style={{ color: \"#9f9f9f\" }}\n              >\n                {formatBalance(coin2.balance, coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Reserves Display */}\n          <Typography variant=\"h6\" style={{ color: \"#fff\" }}>\n            Reserves\n          </Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography\n                variant=\"body1\"\n                className={classes.balance}\n                style={{ color: \"#9f9f9f\" }}\n              >\n                {formatReserve(reserves[0], coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography\n                variant=\"body1\"\n                className={classes.balance}\n                style={{ color: \"#9f9f9f\" }}\n              >\n                {formatReserve(reserves[1], coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Liquidity Tokens Display */}\n          <Typography variant=\"h6\" style={{ color: \"#fff\" }}>\n            Your Liquidity Pool Tokens\n          </Typography>\n          <Grid container direction=\"row\" justifyContent=\"center\">\n            <Grid item xs={6}>\n              <Typography\n                variant=\"body1\"\n                className={classes.balance}\n                style={{ color: \"#9f9f9f\" }}\n              >\n                {formatReserve(liquidityTokens, \"UNI-V2\")}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Paper className={classes.paperContainer}>\n          {/*Red  Display to show the quote */}\n          <Grid\n            container\n            item\n            direction=\"column\"\n            alignItems=\"center\"\n            spacing={2}\n            className={classes.fullWidth}\n          >\n            {/* Tokens in */}\n            <Typography variant=\"h6\" color=\"secondary\">\n              Tokens in\n            </Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography\n                  variant=\"body1\"\n                  className={classes.balance}\n                  color=\"secondary\"\n                >\n                  {formatBalance(liquidityOut[0], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography\n                  variant=\"body1\"\n                  className={classes.balance}\n                  color=\"secondary\"\n                >\n                  {formatBalance(liquidityOut[1], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} style={{ color: \"#000\" }} />\n\n            {/* Liquidity Tokens Display */}\n            <Typography variant=\"h6\" color=\"secondary\">\n              Liquidity Pool Tokens Out\n            </Typography>\n            <Grid container direction=\"row\" justifyContent=\"center\">\n              <Grid item xs={6}>\n                <Typography\n                  variant=\"body1\"\n                  className={classes.balance}\n                  color=\"secondary\"\n                >\n                  {formatReserve(liquidityOut[2], \"UNI-V2\")}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Paper>\n\n        <hr className={classes.hr} />\n      </Grid>\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <LoadingButton\n          loading={loading}\n          valid={isButtonEnabled()}\n          success={false}\n          fail={false}\n          onClick={deploy}\n          style={{ color: \"#000\" }}\n        >\n          <AccountBalanceIcon className={classes.buttonIcon} />\n          Deploy\n        </LoadingButton>\n      </Grid>\n    </div>\n  );\n}\n\nexport default LiquidityDeployer;\n","import React, { useEffect, useCallback } from \"react\";\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport { useSnackbar } from \"notistack\";\nimport { getBalanceAndSymbol, getReserves } from \"../ethereumFunctions\";\nimport { removeLiquidity, quoteRemoveLiquidity } from \"./LiquidityFunctions\";\nimport {\n  RemoveLiquidityField1,\n  RemoveLiquidityField2,\n} from \"../CoinSwapper/CoinField\";\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(3),\n    width: \"40%\",\n    overflow: \"wrap\",\n    background: \"#00CFFF\",\n    color: \"white\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  values: {\n    width: \"50%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction LiquidityRemover(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen] = React.useState(false);\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Stores the liquidity tokens balance of the user\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\");\n\n  // Stores the input and output for the liquidity removal preview\n  const [tokensOut, setTokensOut] = React.useState([0, 0, 0]);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = useCallback(() => {\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n    const parsedInput = parseFloat(field1Value);\n    return (\n      coin1.address &&\n      coin2.address &&\n      !isNaN(parsedInput) &&\n      0 < parsedInput &&\n      parsedInput <= liquidityTokens\n    );\n  }, [coin1.address, coin2.address, field1Value, liquidityTokens]);\n\n  const remove = () => {\n    console.log(\"Attempting to remove liquidity...\");\n    setLoading(true);\n\n    removeLiquidity(\n      coin1.address,\n      coin2.address,\n      field1Value,\n      0,\n      0,\n      props.network.router,\n      props.network.account,\n      props.network.signer,\n      props.network.factory\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        enqueueSnackbar(\"Removal Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(\n        props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n      ).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(\n        props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n      ).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address && props.network.account) {\n      getReserves(\n        coin1.address,\n        coin2.address,\n        props.network.factory,\n        props.network.signer,\n        props.network.account\n      ).then((data) => {\n        setReserves([data[0], data[1]]);\n        setLiquidityTokens(data[2]);\n      });\n    }\n  }, [\n    coin1.address,\n    coin2.address,\n    props.network.account,\n    props.network.factory,\n    props.network.signer,\n  ]);\n\n  // This hook is called when either of the state variables `field1Value`, `coin1.address` or `coin2.address` change.\n  // It will give a preview of the liquidity removal.\n  useEffect(() => {\n    if (isButtonEnabled()) {\n      console.log(\"Trying to preview the liquidity removal\");\n      quoteRemoveLiquidity(\n        coin1.address,\n        coin2.address,\n        field1Value,\n        props.network.factory,\n        props.network.signer\n      ).then((data) => {\n        setTokensOut(data);\n      });\n    }\n  }, [\n    coin1.address,\n    coin2.address,\n    field1Value,\n    props.network.factory,\n    props.network.signer,\n    isButtonEnabled,\n  ]);\n\n  useEffect(() => {\n    // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n    // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n\n    const coinTimeout = setTimeout(() => {\n      console.log(\"Checking balances & Getting reserves...\");\n\n      if (coin1.address && coin2.address && props.network.account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          props.network.factory,\n          props.network.signer,\n          props.network.account\n        ).then((data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        });\n      }\n\n      if (coin1.address && props.network.account && !wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin1.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n        ).then((data) => {\n          setCoin1({\n            ...coin1,\n            balance: data.balance,\n          });\n        });\n      }\n      if (coin2.address && props.network.account && !wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin2.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n        ).then((data) => {\n          setCoin2({\n            ...coin2,\n            balance: data.balance,\n          });\n        });\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  return (\n    <div>\n      {/* Coin Swapper */}\n      <Typography variant=\"h5\" className={classes.title}></Typography>\n\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={props.network.coins}\n        signer={props.network.signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={props.network.coins}\n        signer={props.network.signer}\n      />\n      <WrongNetwork open={wrongNetworkOpen} />\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <Grid item xs={12} className={classes.fullWidth}>\n          <RemoveLiquidityField1\n            activeField={true}\n            value={field1Value}\n            onClick={() => setDialog1Open(true)}\n            onChange={handleChange.field1}\n            symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.fullWidth}>\n          <RemoveLiquidityField2\n            activeField={true}\n            onClick={() => setDialog2Open(true)}\n            symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n          />\n        </Grid>\n      </Grid>\n\n      <Grid\n        container\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        spacing={4}\n        className={classes.balance}\n      >\n        <hr className={classes.hr} />\n        <Grid\n          container\n          item\n          className={classes.values}\n          direction=\"column\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          {/* Balance Display */}\n          <Typography variant=\"h6\" style={{ color: \"#fff\" }}>\n            Your Balances\n          </Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography\n                variant=\"body1\"\n                className={classes.balance}\n                style={{ color: \"#9f9f9f\" }}\n              >\n                {formatBalance(coin1.balance, coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography\n                variant=\"body1\"\n                className={classes.balance}\n                style={{ color: \"#9f9f9f\" }}\n              >\n                {formatBalance(coin2.balance, coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Reserves Display */}\n          <Typography variant=\"h6\" style={{ color: \"#fff\" }}>\n            Reserves\n          </Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography\n                variant=\"body1\"\n                className={classes.balance}\n                style={{ color: \"#9f9f9f\" }}\n              >\n                {formatReserve(reserves[0], coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography\n                variant=\"body1\"\n                className={classes.balance}\n                style={{ color: \"#9f9f9f\" }}\n              >\n                {formatReserve(reserves[1], coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Liquidity Tokens Display */}\n          <Typography variant=\"h6\" style={{ color: \"#fff\" }}>\n            Your Liquidity Pool Tokens\n          </Typography>\n          <Grid container direction=\"row\" justifyContent=\"center\">\n            <Grid item xs={6}>\n              <Typography\n                variant=\"body1\"\n                className={classes.balance}\n                style={{ color: \"#9f9f9f\" }}\n              >\n                {formatReserve(liquidityTokens, \"UNI-V2\")}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <Paper className={classes.paperContainer}>\n          {/*Red  Display to show the quote */}\n          <Grid\n            container\n            item\n            direction=\"column\"\n            alignItems=\"center\"\n            spacing={2}\n            className={classes.fullWidth}\n          >\n            {/* Tokens in */}\n            <Typography variant=\"h6\" color=\"secondary\">\n              Liquidity Pool Tokens in\n            </Typography>\n            <Grid container direction=\"row\" justifyContent=\"center\">\n              <Grid item xs={6}>\n                <Typography\n                  variant=\"body1\"\n                  className={classes.balance}\n                  color=\"secondary\"\n                >\n                  {formatBalance(tokensOut[0], \"UNI-V2\")}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} style={{ color: \"#000\" }} />\n\n            {/* Liquidity Tokens Display */}\n            <Typography variant=\"h6\" color=\"secondary\">\n              Tokens Out\n            </Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography\n                  variant=\"body1\"\n                  className={classes.balance}\n                  color=\"secondary\"\n                >\n                  {formatBalance(tokensOut[1], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography\n                  variant=\"body1\"\n                  className={classes.balance}\n                  color=\"secondary\"\n                >\n                  {formatBalance(tokensOut[2], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Paper>\n        <hr className={classes.hr} />\n      </Grid>\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <LoadingButton\n          loading={loading}\n          valid={isButtonEnabled()}\n          success={false}\n          fail={false}\n          onClick={remove}\n          style={{ color: \"#000\" }}\n        >\n          <ArrowDownwardIcon className={classes.buttonIcon} />\n          Remove\n        </LoadingButton>\n      </Grid>\n    </div>\n  );\n}\n\nexport default LiquidityRemover;\n","import React from \"react\";\nimport { Container, makeStyles, Paper, Typography } from \"@material-ui/core\";\n\nimport SwitchButton from \"./SwitchButton\";\nimport LiquidityDeployer from \"./LiquidityDeployer\";\nimport LiquidityRemover from \"./RemoveLiquidity\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    maxWidth: 700,\n    margin: \"auto\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  footer: {\n    marginTop: \"155px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction Liquidity(props) {\n  const classes = useStyles();\n\n  const [deploy, setDeploy] = React.useState(true);\n\n  const deploy_or_remove = (deploy) => {\n    if (deploy === true) {\n      return <LiquidityDeployer network={props.network} />;\n    }\n    return <LiquidityRemover network={props.network} />;\n  };\n\n  return (\n    <div>\n      <Container>\n        <Paper className={classes.paperContainer}>\n          <Typography variant=\"h5\" className={classes.title}>\n            <SwitchButton setDeploy={setDeploy} />\n          </Typography>\n\n          {deploy_or_remove(deploy)}\n        </Paper>\n      </Container>\n\n      {/* <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n          Alternative Uniswap Interface | Get AUT for use in the bakerloo testnet{\" \"}\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\n        </p>\n      </Grid> */}\n    </div>\n  );\n}\n\nexport default Liquidity;\n","import React from \"react\";\nimport \"./App.css\";\nimport Web3Provider from \"./network\";\nimport NavBar from \"./NavBar/NavBar\";\nimport CoinSwapper from \"./CoinSwapper/CoinSwapper\";\nimport { Route } from \"react-router-dom\";\nimport { SnackbarProvider } from \"notistack\";\nimport Liquidity from \"./Liquidity/Liquidity\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#00CFFF\",\n      contrastText: \"#000\",\n    },\n    secondary: {\n      main: \"#000000\",\n      contrastText: \"#9f9f9f\",\n    },\n    background: {\n      default: \"#000000\",\n      paper: \"#10141A\",\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <SnackbarProvider maxSnack={3}>\n        <ThemeProvider theme={theme}>\n          <Web3Provider\n            render={(network) => (\n              <div>\n                <NavBar />\n                <Route exact path=\"/\">\n                  <CoinSwapper network={network} />\n                </Route>\n\n                <Route exact path=\"/liquidity\">\n                  <Liquidity network={network} />\n                </Route>\n              </div>\n            )}\n          ></Web3Provider>\n        </ThemeProvider>\n      </SnackbarProvider>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}