{"version":3,"sources":["Components/connectWalletPage.js","constants/chains.js","ethereumFunctions.js","constants/coins.js","network.js","NavBar/MenuItems.js","NavBar/NavBar.js","CoinSwapper/CoinField.js","CoinSwapper/CoinButton.js","CoinSwapper/CoinDialog.js","Components/LoadingButton.js","Components/wrongNetwork.js","CoinSwapper/CoinSwapper.js","Liquidity/SwitchButton.js","Liquidity/LiquidityFunctions.js","Liquidity/LiquidityDeployer.js","Liquidity/RemoveLiquidity.js","Liquidity/Liquidity.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","paperContainer","borderRadius","spacing","padding","paddingBottom","maxWidth","margin","marginTop","fullWidth","width","title","textAlign","marginBottom","hr","balance","overflow","buttonIcon","marginRight","footer","ConnectWalletPage","classes","Container","Paper","className","Typography","variant","style","color","networks","ChainId","routerAddress","Map","set","ROUTER","require","ERC20","FACTORY","PAIR","getNetwork","provider","a","network","chainId","getWeth","address","signer","Contract","abi","getFactory","getAccount","window","ethereum","request","method","accounts","getDecimals","token","decimals","then","result","catch","error","console","log","getBalanceAndSymbol","accountAddress","weth_address","coins","getBalance","balanceRaw","ethers","utils","formatEther","symbol","abbr","tokenDecimals","balanceOf","address1","address2","amount","routerContract","tokens","time","Math","floor","Date","now","deadline","BigNumber","from","token1","amountIn","parseUnits","callStatic","getAmountsOut","amountOut","approve","WETH","wethAddress","swapExactETHForTokens","value","swapExactTokensForETH","swapExactTokensForTokens","token1Decimals","token2","token2Decimals","String","values_out","amount_out","Number","fetchReserves","pair","coin1","coin2","coin1Decimals","coin2Decimals","getReserves","reservesRaw","token0","results","factory","getPair","pairAddress","liquidityTokens_BN","liquidityTokens","toPrecision","COINS","chains","name","Web3Provider","props","useState","isConnected","setConnected","isLoading","setIsLoading","isSwitchingNetwork","setIsSwitchingNetwork","networkRef","useRef","account","chainID","router","weth","HYPERION_TESTNET","id","nativeCurrency","rpcUrls","default","http","blockExplorers","url","backgroundListener","isWalletAvailable","useCallback","requestWalletConnection","Error","setupConnection","BrowserProvider","e","providers","current","getSigner","includes","get","factory_address","warn","createListener","setInterval","switchToHyperionTestnet","chainIdHex","toString","params","code","chainName","blockExplorerUrls","Promise","resolve","setTimeout","switchNetwork","networkConfig","useEffect","mounted","clearInterval","listener","initialSetup","handleAccountsChanged","length","handleChainChanged","handleDisconnect","on","removeListener","onClick","disabled","backgroundColor","border","cursor","opacity","render","MenuItems","cName","NavBar","location","useLocation","map","item","index","isActive","pathname","to","container","minHeight","borderColor","borderWidth","borderStyle","container_input","marginLeft","container_blank","grid","height","fab","zIndex","input","typography","h5","inputBase","RemoveLiquidityField1","onChange","activeField","Grid","direction","justifyContent","alignItems","xs","Fab","size","InputBase","placeholder","root","RemoveLiquidityField2","CoinField","button","paddingTop","coinName","CoinButton","coinAbbr","ButtonBase","focusRipple","styles","dialogContainer","titleSection","titleText","alignSelf","paddingLeft","paddingRight","coinList","overflowY","coinContainer","DialogTitle","withStyles","children","onClose","other","disableTypography","alignContent","IconButton","aria-label","DialogActions","MuiDialogActions","CoinDialog","open","React","setAddress","setError","exit","Dialog","undefined","paper","TextField","target","helperText","InputProps","InputLabelProps","FormHelperTextProps","coin","Button","autoFocus","err","doesTokenExist","fontWeight","wrapper","position","progress","green","top","left","disabledButton","palette","secondary","main","contrastText","LoadingButton","loading","valid","success","fail","type","CircularProgress","WrongNetwork","switchButton","primary","CoinSwapper","enqueueSnackbar","useSnackbar","dialog1Open","setDialog1Open","dialog2Open","setDialog2Open","wrongNetworkOpen","setCoin1","setCoin2","reserves","setReserves","field1Value","setField1Value","field2Value","setField2Value","setLoading","switchFields","reverse","handleChange","field1","formatBalance","parseFloat","formatReserve","reserve","data","isNaN","getAmountOut","toFixed","coinTimeout","clearTimeout","fontSize","parsedInput1","parsedInput2","isButtonEnabled","swapTokens","message","autoHideDuration","SwitchButton","setDeploy","changeStyles","K","add_button","document","getElementById","remove_button","ButtonGroup","text","amount1","amount2","amount1min","amount2min","amountIn1","amountIn2","amount1Min","amount2Min","addLiquidityETH","addLiquidity","liquidity_tokens","liquidity","Getliquidity","removeLiquidityETH","removeLiquidity","quote","reserve1","reserve2","quoteMintLiquidity","amountA","amountB","MINIMUM_LIQUIDITY","_reserveA","_reserveB","totalSupply","reserveA","reserveB","_totalSupply","valueA","valueB","sqrt","min","amountADesired","amountBDesired","amountBOptimal","amountAOptimal","feeTo","feeOn","kLast","_kLast","feeLiquidity","Aout","Bout","background","values","LiquidityDeployer","setLiquidityTokens","liquidityOut","setLiquidityOut","oldField1Value","oldField2Value","field2","quoteAddLiquidity","networksigner","LiquidityRemover","tokensOut","setTokensOut","parsedInput","quoteRemoveLiquidity","Liquidity","deploy","deploy_or_remove","createTheme","App","maxSnack","ThemeProvider","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.6bc32995.chunk.js","sourcesContent":["import React from \"react\";\nimport { Container, makeStyles, Paper, Typography } from \"@material-ui/core\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    maxWidth: 700,\n    margin: \"auto\",\n    marginTop: \"200px\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n  footer: {\n    marginTop: \"155px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction ConnectWalletPage() {\n  const classes = useStyles();\n  return (\n    <div>\n      {/* <div className=\"Title\">\n        <h1 className=\"navbar-logo\">Uniswap v2 Interface</h1>\n      </div> */}\n\n      <Container>\n        <Paper className={classes.paperContainer}>\n          <Typography\n            variant=\"h6\"\n            className={classes.title}\n            style={{ color: \"white\" }}\n          >\n            Please connect an Ethereum wallet to your browser to use the\n            application\n          </Typography>\n        </Paper>\n      </Container>\n\n      {/* <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>Uniswap v2 Interface</p>\n      </Grid> */}\n    </div>\n  );\n}\n\nexport default ConnectWalletPage;\n","export const networks = [133717];\n\nexport const ChainId = {\n  HYPERION_SEPOLIA: 133717,\n};\n\nexport const routerAddress = new Map();\nrouterAddress.set(\n  ChainId.HYPERION_SEPOLIA,\n  \"0xa1cF48c109f8B5eEe38B406591FE27f11f685a1f\"\n);\n","import { Contract, ethers } from \"ethers\";\nimport * as chains from \"./constants/chains\";\n\nconst ROUTER = require(\"./build/UniswapV2Router02.json\");\nconst ERC20 = require(\"./build/ERC20.json\");\nconst FACTORY = require(\"./build/IUniswapV2Factory.json\");\nconst PAIR = require(\"./build/IUniswapV2Pair.json\");\n\nexport function getProvider() {\n  return new ethers.providers.Web3Provider(window.ethereum);\n}\n\nexport function getSigner(provider) {\n  return provider.getSigner();\n}\n\nexport async function getNetwork(provider) {\n  const network = await provider.getNetwork();\n  return network.chainId;\n}\n\nexport function getRouter(address, signer) {\n  return new Contract(address, ROUTER.abi, signer);\n}\n\nexport async function checkNetwork(provider) {\n  const chainId = getNetwork(provider);\n  if (chains.networks.includes(chainId)) {\n    return true;\n  }\n  return false;\n}\n\nexport function getWeth(address, signer) {\n  return new Contract(address, ERC20.abi, signer);\n}\n\nexport function getFactory(address, signer) {\n  return new Contract(address, FACTORY.abi, signer);\n}\n\nexport async function getAccount() {\n  const accounts = await window.ethereum.request({\n    method: \"eth_requestAccounts\",\n  });\n\n  return accounts[0];\n}\n\n//This function checks if a ERC20 token exists for a given address\n//    `address` - The Ethereum address to be checked\n//    `signer` - The current signer\nexport function doesTokenExist(address, signer) {\n  try {\n    return new Contract(address, ERC20.abi, signer);\n  } catch (err) {\n    return false;\n  }\n}\n\nexport async function getDecimals(token) {\n  const decimals = await token\n    .decimals()\n    .then((result) => {\n      return result;\n    })\n    .catch((error) => {\n      console.log(\"No tokenDecimals function for this token, set to 0\");\n      return 0;\n    });\n  return decimals;\n}\n\n// This function returns an object with 2 fields: `balance` which container's the account's balance in the particular token,\n// and `symbol` which is the abbreviation of the token name. To work correctly it must be provided with 4 arguments:\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `address` - An Ethereum address of the token to check for (either a token or AUT)\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function getBalanceAndSymbol(\n  accountAddress,\n  address,\n  provider,\n  signer,\n  weth_address,\n  coins\n) {\n  try {\n    if (address === weth_address) {\n      const balanceRaw = await provider.getBalance(accountAddress);\n\n      return {\n        balance: ethers.utils.formatEther(balanceRaw),\n        symbol: coins[0].abbr,\n      };\n    } else {\n      const token = new Contract(address, ERC20.abi, signer);\n      const tokenDecimals = await getDecimals(token);\n      const balanceRaw = await token.balanceOf(accountAddress);\n      const symbol = await token.symbol();\n\n      return {\n        balance: balanceRaw * 10 ** -tokenDecimals,\n        symbol: symbol,\n      };\n    }\n  } catch (error) {\n    console.log(\"The getBalanceAndSymbol function had an error!\");\n    console.log(error);\n    return false;\n  }\n}\n\n// This function swaps two particular tokens / AUT, it can handle switching from AUT to ERC20 token, ERC20 token to AUT, and ERC20 token to ERC20 token.\n// No error handling is done, so any issues can be caught with the use of .catch()\n// To work correctly, there needs to be 7 arguments:\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\n//    `amount` - A float or similar number representing the value of address1's token to trade\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `signer` - The current signer\nexport async function swapTokens(\n  address1,\n  address2,\n  amount,\n  routerContract,\n  accountAddress,\n  signer\n) {\n  const tokens = [address1, address2];\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const tokenDecimals = await getDecimals(token1);\n\n  const amountIn = ethers.utils.parseUnits(amount, tokenDecimals);\n  const amountOut = await routerContract.callStatic.getAmountsOut(\n    amountIn,\n    tokens\n  );\n\n  await token1.approve(routerContract.address, amountIn);\n  const wethAddress = await routerContract.WETH();\n\n  if (address1 === wethAddress) {\n    // Eth -> Token\n    await routerContract.swapExactETHForTokens(\n      amountOut[1],\n      tokens,\n      accountAddress,\n      deadline,\n      { value: amountIn }\n    );\n  } else if (address2 === wethAddress) {\n    // Token -> Eth\n    await routerContract.swapExactTokensForETH(\n      amountIn,\n      amountOut[1],\n      tokens,\n      accountAddress,\n      deadline\n    );\n  } else {\n    await routerContract.swapExactTokensForTokens(\n      amountIn,\n      amountOut[1],\n      tokens,\n      accountAddress,\n      deadline\n    );\n  }\n}\n\n//This function returns the conversion rate between two token addresses\n//    `address1` - An Ethereum address of the token to swaped from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to swaped to (either a token or AUT)\n//    `amountIn` - Amount of the token at address 1 to be swaped from\n//    `routerContract` - The router contract to carry out this swap\nexport async function getAmountOut(\n  address1,\n  address2,\n  amountIn,\n  routerContract,\n  signer\n) {\n  try {\n    const token1 = new Contract(address1, ERC20.abi, signer);\n    const token1Decimals = await getDecimals(token1);\n\n    const token2 = new Contract(address2, ERC20.abi, signer);\n    const token2Decimals = await getDecimals(token2);\n\n    const values_out = await routerContract.getAmountsOut(\n      ethers.utils.parseUnits(String(amountIn), token1Decimals),\n      [address1, address2]\n    );\n    const amount_out = values_out[1] * 10 ** -token2Decimals;\n    console.log(\"amount out: \", amount_out);\n    return Number(amount_out);\n  } catch {\n    return false;\n  }\n}\n\n// This function calls the pair contract to fetch the reserves stored in a the liquidity pool between the token of address1 and the token\n// of address2. Some extra logic was needed to make sure that the results were returned in the correct order, as\n// `pair.getReserves()` would always return the reserves in the same order regardless of which order the addresses were.\n//    `address1` - An Ethereum address of the token to trade from (either a ERC20 token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a ERC20 token or AUT)\n//    `pair` - The pair contract for the two tokens\nexport async function fetchReserves(address1, address2, pair, signer) {\n  try {\n    // Get decimals for each coin\n    const coin1 = new Contract(address1, ERC20.abi, signer);\n    const coin2 = new Contract(address2, ERC20.abi, signer);\n\n    const coin1Decimals = await getDecimals(coin1);\n    const coin2Decimals = await getDecimals(coin2);\n\n    console.log(pair.address);\n\n    // Get reserves\n    const reservesRaw = await pair.getReserves();\n\n    // Put the results in the right order\n    const results = [\n      (await pair.token0()) === address1 ? reservesRaw[0] : reservesRaw[1],\n      (await pair.token1()) === address2 ? reservesRaw[1] : reservesRaw[0],\n    ];\n\n    // Scale each to the right decimal place\n    return [\n      results[0] * 10 ** -coin1Decimals,\n      results[1] * 10 ** -coin2Decimals,\n    ];\n  } catch (err) {\n    console.log(\"error!\");\n    console.log(err);\n    return [0, 0];\n  }\n}\n\n// This function returns the reserves stored in a the liquidity pool between the token of address1 and the token\n// of address2, as well as the liquidity tokens owned by accountAddress for that pair.\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\n//    `factory` - The current factory\n//    `signer` - The current signer\nexport async function getReserves(\n  address1,\n  address2,\n  factory,\n  signer,\n  accountAddress\n) {\n  try {\n    const pairAddress = await factory.getPair(address1, address2);\n    const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n    if (pairAddress !== \"0x0000000000000000000000000000000000000000\") {\n      const reservesRaw = await fetchReserves(address1, address2, pair, signer);\n      const liquidityTokens_BN = await pair.balanceOf(accountAddress);\n      const liquidityTokens = Number(\n        ethers.utils.formatEther(liquidityTokens_BN)\n      );\n\n      return [\n        reservesRaw[0].toPrecision(6),\n        reservesRaw[1].toPrecision(6),\n        liquidityTokens,\n      ];\n    } else {\n      console.log(\"no reserves yet\");\n      return [0, 0, 0];\n    }\n  } catch (err) {\n    console.log(\"error!\");\n    console.log(err);\n    return [0, 0, 0];\n  }\n}\n","import * as chains from \"./chains\";\n\n// If you add coins for a new network, make sure Weth address (for the router you are using) is the first entry\n\nconst HYPERION_SEPOLIACoins = [\n  {\n    name: \"Metis\",\n    abbr: \"METIS\",\n    address: \"0x94765A5Ad79aE18c6913449Bf008A0B5f247D301\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Dai\",\n    abbr: \"DAI\",\n    address: \"0xc4c33c42684ad16e84800c25d5dE7B650E9F95Ca\",\n  },\n  {\n    name: \"Wrapped Ethereum\",\n    abbr: \"WETH\",\n    address: \"0x9AB236Ec38492099a4d35552e6dC7D9442607f9A\",\n  },\n  {\n    name: \"Wrapped Bitcoin\",\n    abbr: \"WBTC\",\n    address: \"0x63d940F5b04235aba7E921a3b508aB1360D32706\",\n  },\n  {\n    name: \"Tether USD\",\n    abbr: \"USDT\",\n    address: \"0x3c099E287eC71b4AA61A7110287D715389329237\",\n  },\n];\n\nconst COINS = new Map();\nCOINS.set(chains.ChainId.HYPERION_SEPOLIA, HYPERION_SEPOLIACoins);\nexport default COINS;\n","import { useEffect, useState, useRef, useCallback } from \"react\";\nimport { ethers } from \"ethers\";\nimport ConnectWalletPage from \"./Components/connectWalletPage\";\nimport {\n  getAccount,\n  getFactory,\n  getRouter,\n  getNetwork,\n  getWeth,\n} from \"./ethereumFunctions\";\nimport COINS from \"./constants/coins\";\nimport * as chains from \"./constants/chains\";\n\nconst Web3Provider = (props) => {\n  const [isConnected, setConnected] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSwitchingNetwork, setIsSwitchingNetwork] = useState(false);\n\n  // Use refs for network data\n  const networkRef = useRef({\n    provider: null,\n    signer: null,\n    account: null,\n    coins: [],\n    chainID: null,\n    router: null,\n    factory: null,\n    weth: null,\n  });\n\n  // Hyperion Testnet configuration\n  const HYPERION_TESTNET = {\n    id: 133717,\n    name: \"Hyperion Testnet\",\n    nativeCurrency: { name: \"tMETIS\", symbol: \"tMETIS\", decimals: 18 },\n    rpcUrls: {\n      default: { http: [\"https://hyperion-testnet.metisdevops.link/\"] },\n    },\n    blockExplorers: {\n      default: {\n        name: \"Hyperion Testnet Explorer\",\n        url: \"https://hyperion-testnet-explorer.metisdevops.link/\",\n      },\n    },\n  };\n\n  const backgroundListener = useRef(null);\n\n  // Check if wallet is available\n  const isWalletAvailable = useCallback(() => {\n    return typeof window !== \"undefined\" && window.ethereum;\n  }, []);\n\n  // Request wallet connection\n  const requestWalletConnection = useCallback(async () => {\n    if (!isWalletAvailable()) {\n      throw new Error(\"No wallet detected\");\n    }\n\n    try {\n      // Request account access\n      await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      return true;\n    } catch (error) {\n      console.error(\"User rejected wallet connection:\", error);\n      return false;\n    }\n  }, [isWalletAvailable]);\n\n  const setupConnection = useCallback(async () => {\n    try {\n      if (!isWalletAvailable()) {\n        setConnected(false);\n        setIsLoading(false);\n        return;\n      }\n\n      // Try to connect to wallet first\n      const connected = await requestWalletConnection();\n      if (!connected) {\n        setConnected(false);\n        setIsLoading(false);\n        return;\n      }\n\n      // Create provider - try both ethers v5 and v6 syntax\n      let provider;\n      try {\n        // Ethers v6 syntax\n        provider = new ethers.BrowserProvider(window.ethereum);\n      } catch (e) {\n        // Fallback to ethers v5 syntax\n        provider = new ethers.providers.Web3Provider(window.ethereum);\n      }\n\n      networkRef.current.provider = provider;\n      networkRef.current.signer = await provider.getSigner();\n\n      // Get account\n      const account = await getAccount();\n      networkRef.current.account = account;\n\n      // Get network\n      const chainId = await getNetwork(provider);\n      networkRef.current.chainID = chainId;\n\n      if (chains.networks.includes(chainId)) {\n        // Get the router using the chainID\n        networkRef.current.router = await getRouter(\n          chains.routerAddress.get(chainId),\n          networkRef.current.signer\n        );\n\n        // Get the default coins for the chain\n        networkRef.current.coins = COINS.get(chainId);\n\n        // Get the WETH address for the chain\n        const wethAddress = networkRef.current.coins[0].address;\n        networkRef.current.weth = getWeth(\n          wethAddress,\n          networkRef.current.signer\n        );\n\n        // Set the value of the weth address in the default coins array\n        networkRef.current.coins[0].address = wethAddress;\n\n        // Get the factory address from the router\n        const factory_address = await networkRef.current.router.factory();\n        networkRef.current.factory = getFactory(\n          factory_address,\n          networkRef.current.signer\n        );\n\n        setConnected(true);\n      } else {\n        console.warn(`Unsupported chain ID: ${chainId}`);\n        setConnected(false);\n      }\n    } catch (error) {\n      console.error(\"Setup connection error:\", error);\n      setConnected(false);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isWalletAvailable, requestWalletConnection]);\n\n  const createListener = useCallback(() => {\n    return setInterval(async () => {\n      try {\n        if (!isWalletAvailable()) {\n          setConnected(false);\n          return;\n        }\n\n        // Check if accounts have changed\n        const currentAccount = await getAccount();\n        if (currentAccount !== networkRef.current.account) {\n          console.log(\"Account changed, reconnecting...\");\n          await setupConnection();\n          return;\n        }\n\n        // Check if chain has changed\n        const currentChainId = await getNetwork(networkRef.current.provider);\n        if (currentChainId !== networkRef.current.chainID) {\n          console.log(\"Chain changed, reconnecting...\");\n          await setupConnection();\n          return;\n        }\n      } catch (error) {\n        console.error(\"Background listener error:\", error);\n        setConnected(false);\n        await setupConnection();\n      }\n    }, 2000); // Reduced frequency to 2 seconds\n  }, [setupConnection, isWalletAvailable]);\n\n  // Switch to Hyperion Testnet\n  const switchToHyperionTestnet = useCallback(async () => {\n    if (!isWalletAvailable()) {\n      throw new Error(\"No wallet detected\");\n    }\n\n    setIsSwitchingNetwork(true);\n\n    try {\n      const chainIdHex = `0x${HYPERION_TESTNET.id.toString(16)}`;\n\n      // Try to switch to the network\n      try {\n        await window.ethereum.request({\n          method: \"wallet_switchEthereumChain\",\n          params: [{ chainId: chainIdHex }],\n        });\n        console.log(\"Successfully switched to Hyperion Testnet\");\n      } catch (switchError) {\n        // If the network doesn't exist, add it\n        if (switchError.code === 4902 || switchError.code === -32603) {\n          console.log(\"Network not found, adding Hyperion Testnet...\");\n\n          await window.ethereum.request({\n            method: \"wallet_addEthereumChain\",\n            params: [\n              {\n                chainId: chainIdHex,\n                chainName: HYPERION_TESTNET.name,\n                nativeCurrency: HYPERION_TESTNET.nativeCurrency,\n                rpcUrls: HYPERION_TESTNET.rpcUrls.default.http,\n                blockExplorerUrls: [\n                  HYPERION_TESTNET.blockExplorers.default.url,\n                ],\n              },\n            ],\n          });\n          console.log(\"Successfully added and switched to Hyperion Testnet\");\n        } else {\n          throw switchError;\n        }\n      }\n\n      // Wait a bit for the network to fully switch\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n\n      // Reconnect after network switch\n      await setupConnection();\n    } catch (error) {\n      console.error(\"Failed to switch to Hyperion Testnet:\", error);\n      throw error;\n    } finally {\n      setIsSwitchingNetwork(false);\n    }\n  }, [\n    isWalletAvailable,\n    setupConnection,\n    HYPERION_TESTNET.blockExplorers.default.url,\n    HYPERION_TESTNET.id,\n    HYPERION_TESTNET.name,\n    HYPERION_TESTNET.nativeCurrency,\n    HYPERION_TESTNET.rpcUrls.default.http,\n  ]);\n\n  // Generic network switch function\n  const switchNetwork = useCallback(\n    async (networkConfig) => {\n      if (!isWalletAvailable()) {\n        throw new Error(\"No wallet detected\");\n      }\n\n      setIsSwitchingNetwork(true);\n\n      try {\n        const chainIdHex = `0x${networkConfig.id.toString(16)}`;\n\n        // Try to switch to the network\n        try {\n          await window.ethereum.request({\n            method: \"wallet_switchEthereumChain\",\n            params: [{ chainId: chainIdHex }],\n          });\n          console.log(`Successfully switched to ${networkConfig.name}`);\n        } catch (switchError) {\n          // If the network doesn't exist, add it\n          if (switchError.code === 4902 || switchError.code === -32603) {\n            console.log(`Network not found, adding ${networkConfig.name}...`);\n\n            await window.ethereum.request({\n              method: \"wallet_addEthereumChain\",\n              params: [\n                {\n                  chainId: chainIdHex,\n                  chainName: networkConfig.name,\n                  nativeCurrency: networkConfig.nativeCurrency,\n                  rpcUrls: networkConfig.rpcUrls.default.http,\n                  blockExplorerUrls: [networkConfig.blockExplorers.default.url],\n                },\n              ],\n            });\n            console.log(\n              `Successfully added and switched to ${networkConfig.name}`\n            );\n          } else {\n            throw switchError;\n          }\n        }\n\n        // Wait a bit for the network to fully switch\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n\n        // Reconnect after network switch\n        await setupConnection();\n      } catch (error) {\n        console.error(`Failed to switch to ${networkConfig.name}:`, error);\n        throw error;\n      } finally {\n        setIsSwitchingNetwork(false);\n      }\n    },\n    [isWalletAvailable, setupConnection]\n  );\n\n  useEffect(() => {\n    let mounted = true;\n\n    async function initialSetup() {\n      console.log(\"Initializing Web3 connection...\");\n\n      if (!mounted) return;\n\n      await setupConnection();\n\n      if (!mounted) return;\n\n      // Start background listener\n      if (backgroundListener.current) {\n        clearInterval(backgroundListener.current);\n      }\n\n      const listener = createListener();\n      backgroundListener.current = listener;\n    }\n\n    initialSetup();\n\n    // Listen to wallet events\n    if (window.ethereum) {\n      const handleAccountsChanged = (accounts) => {\n        console.log(\"Accounts changed:\", accounts);\n        if (accounts.length === 0) {\n          setConnected(false);\n        } else {\n          setupConnection();\n        }\n      };\n\n      const handleChainChanged = (chainId) => {\n        console.log(\"Chain changed:\", chainId);\n        setupConnection();\n      };\n\n      const handleDisconnect = () => {\n        console.log(\"Wallet disconnected\");\n        setConnected(false);\n      };\n\n      window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n      window.ethereum.on(\"chainChanged\", handleChainChanged);\n      window.ethereum.on(\"disconnect\", handleDisconnect);\n\n      return () => {\n        mounted = false;\n        if (backgroundListener.current) {\n          clearInterval(backgroundListener.current);\n        }\n        if (window.ethereum) {\n          window.ethereum.removeListener(\n            \"accountsChanged\",\n            handleAccountsChanged\n          );\n          window.ethereum.removeListener(\"chainChanged\", handleChainChanged);\n          window.ethereum.removeListener(\"disconnect\", handleDisconnect);\n        }\n      };\n    }\n\n    return () => {\n      mounted = false;\n      if (backgroundListener.current) {\n        clearInterval(backgroundListener.current);\n      }\n    };\n  }, [setupConnection, createListener]);\n\n  const renderNotConnected = () => {\n    return (\n      <div className=\"App\">\n        <div>\n          <ConnectWalletPage />\n          <div style={{ marginTop: \"20px\", textAlign: \"center\" }}>\n            <button\n              onClick={switchToHyperionTestnet}\n              disabled={isSwitchingNetwork}\n              style={{\n                padding: \"10px 20px\",\n                backgroundColor: \"#00CFFF\",\n                color: \"black\",\n                border: \"none\",\n                borderRadius: \"5px\",\n                cursor: isSwitchingNetwork ? \"not-allowed\" : \"pointer\",\n                opacity: isSwitchingNetwork ? 0.6 : 1,\n              }}\n            >\n              {isSwitchingNetwork\n                ? \"Switching...\"\n                : \"Switch to Hyperion Testnet\"}\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderLoading = () => {\n    return (\n      <div className=\"App\">\n        <div>\n          {isSwitchingNetwork\n            ? \"Switching network...\"\n            : \"Connecting to wallet...\"}\n        </div>\n      </div>\n    );\n  };\n\n  if (isLoading) {\n    return renderLoading();\n  }\n\n  return (\n    <>\n      {!isConnected && renderNotConnected()}\n      {isConnected && (\n        <div>\n          {props.render({\n            ...networkRef.current,\n            switchToHyperionTestnet,\n            switchNetwork,\n            isSwitchingNetwork,\n            HYPERION_TESTNET,\n          })}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Web3Provider;\n","export const MenuItems = [\n  {\n    title: \"Swap\",\n    url: \"/\",\n    cName: \"nav-links\",\n  },\n  {\n    title: \"Liquidity\",\n    url: \"/liquidity\",\n    cName: \"nav-links\",\n  },\n];\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { MenuItems } from \"./MenuItems\";\nimport \"./NavBar.css\";\nimport { useLocation } from \"react-router-dom\";\n\nfunction NavBar() {\n  const location = useLocation();\n  return (\n    <nav className=\"mainNav\">\n      {/* <div className=\"Title\">\n        <h1 className=\"navbar-logo\">\n          Alternative Uniswap Interface\n        </h1>\n      </div> */}\n\n      <div className=\"NavbarItems\">\n        <ul className={`nav-menu`}>\n          {MenuItems.map((item, index) => {\n            const isActive = location.pathname === item.url;\n            return (\n              <li key={index}>\n                <Link\n                  className={\n                    isActive ? \"nav-links nav-links-clicked\" : \"nav-links\"\n                  }\n                  to={item.url}\n                >\n                  {item.title}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </nav>\n  );\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport { Fab, Grid, InputBase, makeStyles } from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport PropTypes from \"prop-types\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(1),\n    minHeight: \"80px\",\n    backgroundColor: \"#263238\",\n    borderRadius: theme.spacing(2),\n    borderColor: \"#263238\",\n    borderWidth: \"1px\",\n    borderStyle: \"solid\",\n  },\n  container_input: {\n    padding: theme.spacing(1),\n    minHeight: \"68px\",\n    backgroundColor: \"#263238\",\n    borderRadius: theme.spacing(2),\n    borderColor: \"#263238\",\n    borderWidth: \"1px\",\n    borderStyle: \"solid\",\n    marginLeft: \"50%\",\n    textAlign: \"right\",\n  },\n  container_blank: {\n    padding: theme.spacing(1),\n    minHeight: \"80px\",\n    borderRadius: theme.spacing(2),\n  },\n  grid: {\n    height: \"60px\",\n  },\n  fab: {\n    zIndex: \"0\",\n  },\n  input: {\n    ...theme.typography.h5,\n    width: \"100%\",\n    backgroundColor: \"#263238\", // Light grey background\n    color: \"#fff\", // Dark text for readability\n    borderRadius: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  inputBase: {\n    textAlign: \"right\",\n    backgroundColor: \"#263238\", // Light grey background\n    color: \"#fff\", // Dark text for readability\n    borderRadius: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n}));\n\nCoinField.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  symbol: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  activeField: PropTypes.bool.isRequired,\n};\n\nexport function RemoveLiquidityField1(props) {\n  // This component is used to selecting a coin and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol, value, onChange, activeField } = props;\n  return (\n    <div className={classes.container_blank}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n        {/* Text Field */}\n        <Grid item xs={9}>\n          <InputBase\n            value={value}\n            onChange={onChange}\n            placeholder=\"0.0\"\n            disabled={!activeField}\n            classes={{\n              root: classes.container_input,\n              input: classes.inputBase,\n            }}\n          />\n        </Grid>\n        {/* </div> */}\n      </Grid>\n    </div>\n  );\n}\n\nexport function RemoveLiquidityField2(props) {\n  // This component is used to selecting a coin and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol } = props;\n\n  return (\n    <div className={classes.container_blank}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default function CoinField(props) {\n  // This component is used to selecting a token and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol, value, onChange, activeField } = props;\n\n  return (\n    <div className={classes.container}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={4}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n\n        {/* Text Field */}\n        <Grid item xs={8}>\n          <InputBase\n            value={value}\n            onChange={onChange}\n            placeholder=\"0.0\"\n            disabled={!activeField}\n            classes={{ root: classes.input, input: classes.inputBase }}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { ButtonBase, Grid, makeStyles, Typography } from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    width: \"100%\",\n    paddingTop: theme.spacing(0.5),\n    paddingBottom: theme.spacing(0.5),\n    color: \"#fff\", // Softer light gray text\n    backgroundColor: \"#263238\", // Much darker blue-gray\n    borderRadius: theme.spacing(1),\n    \"&:hover, &$focusVisible\": {\n      backgroundColor: \"#11171a\", // Even darker on hover\n    },\n  },\n  coinName: {\n    opacity: 0.8,\n    color: \"#e0e0e0\", // Softer light gray for coin name\n  },\n}));\n\nCoinButton.propTypes = {\n  coinName: PropTypes.string.isRequired,\n  coinAbbr: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default function CoinButton(props) {\n  const { coinName, coinAbbr, onClick } = props;\n  const classes = useStyles();\n\n  return (\n    <ButtonBase focusRipple className={classes.button} onClick={onClick}>\n      <Grid container direction=\"column\">\n        <Typography variant=\"h6\">{coinAbbr}</Typography>\n        <Typography variant=\"body2\" className={classes.coinName}>\n          {coinName}\n        </Typography>\n      </Grid>\n    </ButtonBase>\n  );\n}\n","import React from \"react\";\nimport {\n  Button,\n  Dialog,\n  Grid,\n  IconButton,\n  makeStyles,\n  TextField,\n  Typography,\n  withStyles,\n} from \"@material-ui/core\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport CoinButton from \"./CoinButton\";\nimport { doesTokenExist } from \"../ethereumFunctions\";\nimport PropTypes from \"prop-types\";\n\nconst styles = (theme) => ({\n  dialogContainer: {\n    borderRadius: theme.spacing(2),\n  },\n  titleSection: {\n    padding: theme.spacing(2),\n  },\n  titleText: {\n    alignSelf: \"center\",\n  },\n  hr: {\n    margin: 0,\n  },\n  address: {\n    paddingLeft: theme.spacing(2.5),\n    paddingRight: theme.spacing(2.5),\n    paddingBottom: theme.spacing(2),\n  },\n  coinList: {\n    height: \"300px\",\n    overflowY: \"scroll\",\n  },\n  coinContainer: {\n    paddingLeft: theme.spacing(0.5),\n    paddingRight: theme.spacing(0.5),\n    paddingTop: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    overflow: \"hidden\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\n// This is a modified version of MaterialUI's DialogTitle component, I've added a close button in the top right corner\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle\n      disableTypography\n      className={classes.titleSection}\n      {...other}\n    >\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignContent=\"center\"\n      >\n        <Typography variant=\"h6\" className={classes.titleText}>\n          {children}\n        </Typography>\n        {onClose ? (\n          <IconButton\n            aria-label=\"close\"\n            onClick={onClose}\n            style={{ color: \"#fff\" }}\n          >\n            <CloseIcon />\n          </IconButton>\n        ) : null}\n      </Grid>\n    </MuiDialogTitle>\n  );\n});\n\n// This is a modified version of MaterialUI's DialogActions component, the color has been changed by modifying the CSS\nconst DialogActions = withStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n    backgroundColor: \"#10141A\",\n  },\n}))(MuiDialogActions);\n\nCoinDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  coins: PropTypes.array.isRequired,\n};\n\nexport default function CoinDialog(props) {\n  // The CoinDialog component will display a dialog window on top of the page, allowing a user to select a coin\n  // from a list (list can be found in 'src/constants/coins.js') or enter an address into a search field. Any entered\n  // addresses will first be validated to make sure they exist.\n  // When the dialog closes, it will call the `onClose` prop with 1 argument which will either be undefined (if the\n  // user closes the dialog without selecting anything), or will be a string containing the address of a coin.\n\n  const classes = useStyles();\n  const { onClose, open, coins, signer } = props;\n\n  const [address, setAddress] = React.useState(\"\");\n  const [error, setError] = React.useState(\"\");\n\n  // Called when the user tries to input a custom address, this function will validate the address and will either\n  // then close the dialog and return the validated address, or will display an error.\n  const submit = () => {\n    if (doesTokenExist(address, signer)) {\n      exit(address);\n    } else {\n      setError(\"This address is not valid\");\n    }\n  };\n\n  // Resets any fields in the dialog (in case it's opened in the future) and calls the `onClose` prop\n  const exit = (value) => {\n    setError(\"\");\n    setAddress(\"\");\n    onClose(value);\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={() => exit(undefined)}\n      fullWidth\n      maxWidth=\"sm\"\n      classes={{ paper: classes.dialogContainer }}\n    >\n      <DialogTitle onClose={() => exit(undefined)}>\n        <span style={{ color: \"#fff\" }}>Select Coin</span>\n      </DialogTitle>\n\n      <hr className={classes.hr} />\n\n      <div className={classes.coinContainer}>\n        <Grid container direction=\"column\" spacing={1} alignContent=\"center\">\n          <TextField\n            value={address}\n            onChange={(e) => setAddress(e.target.value)}\n            variant=\"outlined\"\n            placeholder=\"Paste Address\"\n            error={error !== \"\"}\n            helperText={error}\n            fullWidth\n            className={classes.address}\n            InputProps={{ style: { color: \"#fff\" } }}\n            InputLabelProps={{ style: { color: \"#fff\" } }}\n            FormHelperTextProps={{ style: { color: \"#fff\" } }}\n          />\n\n          <hr className={classes.hr} />\n\n          <Grid item className={classes.coinList}>\n            <Grid container direction=\"column\">\n              {/* Maps all of the tokens in the constants file to buttons */}\n              {coins.map((coin, index) => (\n                <Grid item key={index} xs={12}>\n                  <CoinButton\n                    coinName={coin.name}\n                    coinAbbr={coin.abbr}\n                    onClick={() => exit(coin.address)}\n                  />\n                </Grid>\n              ))}\n            </Grid>\n          </Grid>\n        </Grid>\n      </div>\n\n      <hr className={classes.hr} />\n\n      <DialogActions>\n        <Button autoFocus onClick={submit} color=\"primary\">\n          <span style={{ color: \"#fff\", fontWeight: 600 }}>Enter</span>\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React from \"react\";\nimport { Button, CircularProgress, makeStyles } from \"@material-ui/core\";\nimport green from \"@material-ui/core/colors/green\";\n\nconst useStyles = makeStyles((theme) => ({\n  wrapper: {\n    margin: 0,\n    position: \"relative\",\n  },\n  progress: {\n    color: green[500],\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    marginTop: -12,\n    marginLeft: -12,\n  },\n  disabledButton: {\n    backgroundColor: theme.palette.secondary.main + \" !important\",\n    color: theme.palette.secondary.contrastText + \" !important\",\n  },\n}));\n\nexport default function LoadingButton(props) {\n  const classes = useStyles();\n  const { children, loading, valid, success, fail, onClick, ...other } = props;\n  return (\n    <div className={classes.wrapper}>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        fullWidth\n        disabled={loading || !valid}\n        type=\"submit\"\n        onClick={onClick}\n        classes={{ disabled: classes.disabledButton }}\n        {...other}\n      >\n        {children}\n      </Button>\n      {loading && <CircularProgress size={24} className={classes.progress} />}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Dialog, makeStyles } from \"@material-ui/core\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\n\nconst styles = (theme) => ({\n  dialogContainer: {\n    borderRadius: theme.spacing(2),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nexport default function WrongNetwork(props) {\n  const classes = useStyles();\n  const { open } = props;\n  return (\n    <Dialog\n      open={open}\n      fullWidth\n      maxWidth=\"sm\"\n      classes={{ paper: classes.dialogContainer }}\n    >\n      <MuiDialogTitle>Unsupported Network</MuiDialogTitle>\n    </Dialog>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport {\n  Container,\n  Grid,\n  IconButton,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport SwapVerticalCircleIcon from \"@material-ui/icons/SwapVerticalCircle\";\nimport { useSnackbar } from \"notistack\";\nimport LoopIcon from \"@material-ui/icons/Loop\";\nimport {\n  getAmountOut,\n  getBalanceAndSymbol,\n  swapTokens,\n  getReserves,\n} from \"../ethereumFunctions\";\nimport CoinField from \"./CoinField\";\nimport CoinDialog from \"./CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n  },\n  switchButton: {\n    zIndex: 1,\n    margin: \"-16px\",\n    padding: theme.spacing(0.5),\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n    color: theme.palette.primary.contrastText,\n    fontWeight: 600,\n  },\n  footer: {\n    marginTop: \"285px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction CoinSwapper(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen] = React.useState(false);\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setField1Value(field2Value);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n    // If both coins have been selected, and a valid float has been entered which is less than the user's balance, then return true\n    const parsedInput1 = parseFloat(field1Value);\n    const parsedInput2 = parseFloat(field2Value);\n    return (\n      coin1.address &&\n      coin2.address &&\n      !isNaN(parsedInput1) &&\n      !isNaN(parsedInput2) &&\n      0 < parsedInput1 &&\n      parsedInput1 <= coin1.balance\n    );\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(\n        props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n      ).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(\n        props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n      ).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Calls the swapTokens Ethereum function to make the swap, then resets nessicary state variables\n  const swap = () => {\n    console.log(\"Attempting to swap tokens...\");\n    setLoading(true);\n\n    swapTokens(\n      coin1.address,\n      coin2.address,\n      field1Value,\n      props.network.router,\n      props.network.account,\n      props.network.signer\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\n  // are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\n  // the lambda will only ever be called when the component mounts. These are very useful for calculating new values\n  // after a particular state change, for example, calculating the new exchange rate whenever the addresses\n  // of the two coins change.\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get Reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address) {\n      getReserves(\n        coin1.address,\n        coin2.address,\n        props.network.factory,\n        props.network.signer,\n        props.network.account\n      ).then((data) => setReserves(data));\n    }\n  }, [\n    coin1.address,\n    coin2.address,\n    props.network.account,\n    props.network.factory,\n    props.network.router,\n    props.network.signer,\n  ]);\n\n  // This hook is called when either of the state variables `field1Value` `coin1.address` or `coin2.address` change.\n  // It attempts to calculate and set the state variable `field2Value`\n  // This means that if the user types a new value into the conversion box or the conversion rate changes,\n  // the value in the output box will change.\n  useEffect(() => {\n    if (isNaN(parseFloat(field1Value))) {\n      setField2Value(\"\");\n    } else if (parseFloat(field1Value) && coin1.address && coin2.address) {\n      getAmountOut(\n        coin1.address,\n        coin2.address,\n        field1Value,\n        props.network.router,\n        props.network.signer\n      )\n        .then((amount) => setField2Value(amount.toFixed(7)))\n        .catch((e) => {\n          console.log(e);\n          setField2Value(\"NA\");\n        });\n    } else {\n      setField2Value(\"\");\n    }\n  }, [\n    field1Value,\n    coin1.address,\n    coin2.address,\n    props.network.router,\n    props.network.signer,\n  ]);\n\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n  useEffect(() => {\n    const coinTimeout = setTimeout(() => {\n      console.log(\"props: \", props);\n      console.log(\"Checking balances...\");\n\n      if (coin1.address && coin2.address && props.network.account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          props.network.factory,\n          props.network.signer,\n          props.network.account\n        ).then((data) => setReserves(data));\n      }\n\n      if (coin1.address && props.network.account && !wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin1.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n        ).then((data) => {\n          setCoin1({\n            ...coin1,\n            balance: data.balance,\n          });\n        });\n      }\n      if (coin2.address && props.network.account && !wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin2.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n        ).then((data) => {\n          setCoin2({\n            ...coin2,\n            balance: data.balance,\n          });\n        });\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  return (\n    <div>\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={props.network.coins}\n        props={props.network.signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={props.network.coins}\n        signer={props.network.signer}\n      />\n      <WrongNetwork open={wrongNetworkOpen} />\n\n      {/* Coin Swapper */}\n      <Container maxWidth=\"xs\">\n        <Paper className={classes.paperContainer}>\n          <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n            <Grid item xs={12} className={classes.fullWidth}>\n              <CoinField\n                activeField={true}\n                value={field1Value}\n                onClick={() => setDialog1Open(true)}\n                onChange={handleChange.field1}\n                symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n              />\n            </Grid>\n\n            <IconButton\n              onClick={switchFields}\n              className={classes.switchButton}\n              style={{ color: \"#9f9f9f\" }}\n            >\n              <SwapVerticalCircleIcon fontSize=\"medium\" />\n            </IconButton>\n\n            <Grid item xs={12} className={classes.fullWidth}>\n              <CoinField\n                activeField={false}\n                value={field2Value}\n                onClick={() => setDialog2Open(true)}\n                symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n              />\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Balance Display */}\n            <Typography variant=\"h6\" style={{ color: \"#fff\" }}>\n              Your Balances\n            </Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography\n                  variant=\"body1\"\n                  className={classes.balance}\n                  style={{ color: \"#9f9f9f\" }}\n                >\n                  {formatBalance(coin1.balance, coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography\n                  variant=\"body1\"\n                  className={classes.balance}\n                  style={{ color: \"#9f9f9f\" }}\n                >\n                  {formatBalance(coin2.balance, coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Reserves Display */}\n            <Typography variant=\"h6\" style={{ color: \"#fff\" }}>\n              Reserves\n            </Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography\n                  variant=\"body1\"\n                  className={classes.balance}\n                  style={{ color: \"#9f9f9f\" }}\n                >\n                  {formatReserve(reserves[0], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography\n                  variant=\"body1\"\n                  className={classes.balance}\n                  style={{ color: \"#9f9f9f\" }}\n                >\n                  {formatReserve(reserves[1], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            <LoadingButton\n              loading={loading}\n              valid={isButtonEnabled()}\n              success={false}\n              fail={false}\n              onClick={swap}\n              style={{ color: \"#000\" }}\n            >\n              <LoopIcon />\n              <span style={{ fontWeight: 600 }}>Swap</span>\n            </LoadingButton>\n          </Grid>\n        </Paper>\n      </Container>\n\n      {/* <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n        Alternative Uniswap Interface | Get AUT for use in the bakerloo testnet{\" \"}\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\n        </p>\n      </Grid> */}\n    </div>\n  );\n}\n\nexport default CoinSwapper;\n","import React from \"react\";\nimport { ButtonGroup, Button } from \"@material-ui/core\";\n\nexport default function SwitchButton(props) {\n  const { setDeploy } = props;\n\n  const changeStyles = (K) => {\n    if (K === true) {\n      let add_button = document.getElementById(\"add-button\");\n      add_button.style.backgroundColor = \"#00CFFF\";\n      add_button.style.color = \"#000\";\n\n      let remove_button = document.getElementById(\"remove-button\");\n      remove_button.style.backgroundColor = \"#000000\";\n      remove_button.style.color = \"#fff\";\n    } else {\n      let remove_button = document.getElementById(\"remove-button\");\n      remove_button.style.backgroundColor = \"#00CFFF\";\n      remove_button.style.color = \"#000\";\n\n      let add_button = document.getElementById(\"add-button\");\n      add_button.style.backgroundColor = \"#000000\";\n      add_button.style.color = \"#fff\";\n    }\n  };\n\n  return (\n    <div>\n      <ButtonGroup size=\"large\" variant=\"contained\">\n        <Button\n          id=\"add-button\"\n          color=\"primary\"\n          text=\"white\"\n          onClick={() => {\n            setDeploy(true);\n            changeStyles(true);\n          }}\n        >\n          Deploy Liquidity\n        </Button>\n\n        <Button\n          id=\"remove-button\"\n          color=\"secondary\"\n          text=\"white\"\n          onClick={() => {\n            setDeploy(false);\n            changeStyles(false);\n          }}\n          style={{ color: \"#fff\" }}\n        >\n          Remove Liquidity\n        </Button>\n      </ButtonGroup>\n    </div>\n  );\n}\n","import { Contract, ethers } from \"ethers\";\nimport { fetchReserves, getDecimals } from \"../ethereumFunctions\";\n\nconst ERC20 = require(\"../build/ERC20.json\");\nconst PAIR = require(\"../build/IUniswapV2Pair.json\");\n\n// Function used to add Liquidity to any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the coin to add from (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to add to (either a token or AUT)\n//    `amount1` - A float or similar number representing the value of address1's coin to add\n//    `amount2` - A float or similar number representing the value of address2's coin to add\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to add\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to add\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function addLiquidity(\n  address1,\n  address2,\n  amount1,\n  amount2,\n  amount1min,\n  amount2min,\n  routerContract,\n  account,\n  signer\n) {\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const token2 = new Contract(address2, ERC20.abi, signer);\n\n  const token1Decimals = await getDecimals(token1);\n  const token2Decimals = await getDecimals(token2);\n\n  const amountIn1 = ethers.utils.parseUnits(amount1, token1Decimals);\n  const amountIn2 = ethers.utils.parseUnits(amount2, token2Decimals);\n\n  const amount1Min = ethers.utils.parseUnits(amount1min, token1Decimals);\n  const amount2Min = ethers.utils.parseUnits(amount2min, token2Decimals);\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  await token1.approve(routerContract.address, amountIn1);\n  await token2.approve(routerContract.address, amountIn2);\n\n  const wethAddress = await routerContract.WETH();\n\n  console.log([\n    address1,\n    address2,\n    amountIn1,\n    amountIn2,\n    amount1Min,\n    amount2Min,\n    account,\n    deadline,\n  ]);\n\n  if (address1 === wethAddress) {\n    // Eth + Token\n    await routerContract.addLiquidityETH(\n      address2,\n      amountIn2,\n      amount2Min,\n      amount1Min,\n      account,\n      deadline,\n      { value: amountIn1 }\n    );\n  } else if (address2 === wethAddress) {\n    // Token + Eth\n    await routerContract.addLiquidityETH(\n      address1,\n      amountIn1,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline,\n      { value: amountIn2 }\n    );\n  } else {\n    // Token + Token\n    await routerContract.addLiquidity(\n      address1,\n      address2,\n      amountIn1,\n      amountIn2,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  }\n}\n\n// Function used to remove Liquidity from any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `liquidity_tokens` - A float or similar number representing the value of liquidity tokens you will burn to get tokens back\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to recieve\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to recieve\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function removeLiquidity(\n  address1,\n  address2,\n  liquidity_tokens,\n  amount1min,\n  amount2min,\n  routerContract,\n  account,\n  signer,\n  factory\n) {\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const token2 = new Contract(address2, ERC20.abi, signer);\n\n  const token1Decimals = await getDecimals(token1);\n  const token2Decimals = await getDecimals(token2);\n\n  const Getliquidity = (liquidity_tokens) => {\n    if (liquidity_tokens < 0.001) {\n      return ethers.BigNumber.from(liquidity_tokens * 10 ** 18);\n    }\n    return ethers.utils.parseUnits(String(liquidity_tokens), 18);\n  };\n\n  const liquidity = Getliquidity(liquidity_tokens);\n  console.log(\"liquidity: \", liquidity);\n\n  const amount1Min = ethers.utils.parseUnits(\n    String(amount1min),\n    token1Decimals\n  );\n  const amount2Min = ethers.utils.parseUnits(\n    String(amount2min),\n    token2Decimals\n  );\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const wethAddress = await routerContract.WETH();\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  await pair.approve(routerContract.address, liquidity);\n\n  console.log([\n    address1,\n    address2,\n    Number(liquidity),\n    Number(amount1Min),\n    Number(amount2Min),\n    account,\n    deadline,\n  ]);\n\n  if (address1 === wethAddress) {\n    // Eth + Token\n    await routerContract.removeLiquidityETH(\n      address2,\n      liquidity,\n      amount2Min,\n      amount1Min,\n      account,\n      deadline\n    );\n  } else if (address2 === wethAddress) {\n    // Token + Eth\n    await routerContract.removeLiquidityETH(\n      address1,\n      liquidity,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  } else {\n    // Token + Token\n    await routerContract.removeLiquidity(\n      address1,\n      address2,\n      liquidity,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  }\n}\n\nconst quote = (amount1, reserve1, reserve2) => {\n  const amount2 = amount1 * (reserve2 / reserve1);\n  return [amount2];\n};\n\n// Function used to get a quote of the liquidity addition\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `amountA_desired` - The prefered value of the first token that the user would like to deploy as liquidity\n//    `amountB_desired` - The prefered value of the second token that the user would like to deploy as liquidity\n//    `factory` - The current factory\n//    `signer` - The current signer\n\nasync function quoteMintLiquidity(\n  address1,\n  address2,\n  amountA,\n  amountB,\n  factory,\n  signer\n) {\n  const MINIMUM_LIQUIDITY = 1000;\n  let _reserveA = 0;\n  let _reserveB = 0;\n  let totalSupply = 0;\n  [_reserveA, _reserveB, totalSupply] = await factory\n    .getPair(address1, address2)\n    .then(async (pairAddress) => {\n      if (pairAddress !== \"0x0000000000000000000000000000000000000000\") {\n        const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n        const reservesRaw = await fetchReserves(\n          address1,\n          address2,\n          pair,\n          signer\n        ); // Returns the reserves already formated as ethers\n        const reserveA = reservesRaw[0];\n        const reserveB = reservesRaw[1];\n\n        const _totalSupply = await pair.totalSupply();\n        const totalSupply = Number(ethers.utils.formatEther(_totalSupply));\n        return [reserveA, reserveB, totalSupply];\n      } else {\n        return [0, 0, 0];\n      }\n    });\n\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const token2 = new Contract(address2, ERC20.abi, signer);\n\n  // Need to do all this decimals work to account for 0 decimal numbers\n\n  const token1Decimals = await getDecimals(token1);\n  const token2Decimals = await getDecimals(token2);\n\n  const valueA = amountA * 10 ** token1Decimals;\n  const valueB = amountB * 10 ** token2Decimals;\n\n  const reserveA = _reserveA * 10 ** token1Decimals;\n  const reserveB = _reserveB * 10 ** token2Decimals;\n\n  if (totalSupply === 0) {\n    return Math.sqrt(valueA * valueB - MINIMUM_LIQUIDITY) * 10 ** -18;\n  }\n\n  return Math.min(\n    (valueA * totalSupply) / reserveA,\n    (valueB * totalSupply) / reserveB\n  );\n}\n\nexport async function quoteAddLiquidity(\n  address1,\n  address2,\n  amountADesired,\n  amountBDesired,\n  factory,\n  signer\n) {\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\n  const reserveA = reservesRaw[0];\n  const reserveB = reservesRaw[1];\n\n  if (reserveA === 0 && reserveB === 0) {\n    const amountOut = await quoteMintLiquidity(\n      address1,\n      address2,\n      amountADesired,\n      amountBDesired,\n      factory,\n      signer\n    );\n    return [amountADesired, amountBDesired, amountOut.toPrecision(8)];\n  } else {\n    const amountBOptimal = quote(amountADesired, reserveA, reserveB);\n    if (amountBOptimal <= amountBDesired) {\n      const amountOut = await quoteMintLiquidity(\n        address1,\n        address2,\n        amountADesired,\n        amountBOptimal,\n        factory,\n        signer\n      );\n      return [amountADesired, amountBOptimal, amountOut.toPrecision(8)];\n    } else {\n      const amountAOptimal = quote(amountBDesired, reserveB, reserveA);\n      const amountOut = await quoteMintLiquidity(\n        address1,\n        address2,\n        amountAOptimal,\n        amountBDesired,\n        factory,\n        signer\n      );\n      return [amountAOptimal, amountBDesired, amountOut.toPrecision(8)];\n    }\n  }\n}\n\n// Function used to get a quote of the liquidity removal\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `liquidity` - The amount of liquidity tokens the user will burn to get their tokens back\n//    `factory` - The current factory\n//    `signer` - The current signer\n\nexport async function quoteRemoveLiquidity(\n  address1,\n  address2,\n  liquidity,\n  factory,\n  signer\n) {\n  const pairAddress = await factory.getPair(address1, address2);\n  console.log(\"pair address\", pairAddress);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\n  const reserveA = reservesRaw[0];\n  const reserveB = reservesRaw[1];\n\n  const feeOn =\n    (await factory.feeTo()) !== 0x0000000000000000000000000000000000000000;\n\n  const _kLast = await pair.kLast();\n  const kLast = Number(ethers.utils.formatEther(_kLast));\n\n  const _totalSupply = await pair.totalSupply();\n  let totalSupply = Number(ethers.utils.formatEther(_totalSupply));\n\n  if (feeOn && kLast > 0) {\n    const feeLiquidity =\n      (totalSupply * (Math.sqrt(reserveA * reserveB) - Math.sqrt(kLast))) /\n      (5 * Math.sqrt(reserveA * reserveB) + Math.sqrt(kLast));\n    totalSupply = totalSupply + feeLiquidity;\n  }\n\n  const Aout = (reserveA * liquidity) / totalSupply;\n  const Bout = (reserveB * liquidity) / totalSupply;\n\n  return [liquidity, Aout, Bout];\n}\n","import React, { useEffect, useCallback } from \"react\";\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport AccountBalanceIcon from \"@material-ui/icons/AccountBalance\";\nimport { useSnackbar } from \"notistack\";\nimport { getBalanceAndSymbol, getReserves } from \"../ethereumFunctions\";\n\nimport { addLiquidity, quoteAddLiquidity } from \"./LiquidityFunctions\";\n\nimport CoinField from \"../CoinSwapper/CoinField\";\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(3),\n    width: \"40%\",\n    overflow: \"wrap\",\n    background: \"#00CFFF\",\n    color: \"white\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  values: {\n    width: \"50%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction LiquidityDeployer(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen] = React.useState(false);\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Stores the user's balance of liquidity tokens for the current pair\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\");\n\n  // Used when getting a quote of liquidity\n  const [liquidityOut, setLiquidityOut] = React.useState([0, 0, 0]);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    let oldField1Value = field1Value;\n    let oldField2Value = field2Value;\n\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setField1Value(oldField2Value);\n    setField2Value(oldField1Value);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n    field2: (e) => {\n      setField2Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = useCallback(() => {\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n    const parsedInput1 = parseFloat(field1Value);\n    const parsedInput2 = parseFloat(field2Value);\n    return (\n      coin1.address &&\n      coin2.address &&\n      !isNaN(parsedInput1) &&\n      0 < parsedInput1 &&\n      !isNaN(parsedInput2) &&\n      0 < parsedInput2 &&\n      parsedInput1 <= coin1.balance &&\n      parsedInput2 <= coin2.balance\n    );\n  }, [\n    coin1.address,\n    coin1.balance,\n    coin2.address,\n    coin2.balance,\n    field1Value,\n    field2Value,\n  ]);\n\n  const deploy = () => {\n    console.log(\"Attempting to deploy liquidity...\");\n    setLoading(true);\n\n    addLiquidity(\n      coin1.address,\n      coin2.address,\n      field1Value,\n      field2Value,\n      \"0\",\n      \"0\",\n      props.network.router,\n      props.network.account,\n      props.network.signer\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        setField2Value(\"\");\n        enqueueSnackbar(\"Deployment Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(\n        props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n      ).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(\n        props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n      ).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address && props.network.account) {\n      getReserves(\n        coin1.address,\n        coin2.address,\n        props.network.factory,\n        props.network.signer,\n        props.network.account\n      ).then((data) => {\n        setReserves([data[0], data[1]]);\n        setLiquidityTokens(data[2]);\n      });\n    }\n  }, [\n    coin1.address,\n    coin2.address,\n    props.network.account,\n    props.network.factory,\n    props.network.signer,\n  ]);\n\n  // This hook is called when either of the state variables `field1Value`, `field2Value`, `coin1.address` or `coin2.address` change.\n  // It will give a preview of the liquidity deployment.\n  useEffect(() => {\n    if (isButtonEnabled()) {\n      console.log(\"Trying to preview the liquidity deployment\");\n\n      quoteAddLiquidity(\n        coin1.address,\n        coin2.address,\n        field1Value,\n        field2Value,\n        props.network.factory,\n        props.network.signer\n      ).then((data) => {\n        // console.log(data);\n        console.log(\"TokenA in: \", data[0]);\n        console.log(\"TokenB in: \", data[1]);\n        console.log(\"Liquidity out: \", data[2]);\n        setLiquidityOut([data[0], data[1], data[2]]);\n      });\n    }\n  }, [\n    coin1.address,\n    coin2.address,\n    field1Value,\n    field2Value,\n    props.network.factory,\n    props.network.signer,\n    isButtonEnabled,\n  ]);\n\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n  useEffect(() => {\n    const coinTimeout = setTimeout(() => {\n      console.log(\"Checking balances & Getting reserves...\");\n\n      if (coin1.address && coin2.address && props.network.account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          props.network.factory,\n          props.network.signer,\n          props.network.account\n        ).then((data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        });\n      }\n\n      if (coin1.address && props.network.account && !wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin1.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n        ).then((data) => {\n          setCoin1({\n            ...coin1,\n            balance: data.balance,\n          });\n        });\n      }\n      if (coin2.address && props.network.account && !wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin2.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n        ).then((data) => {\n          setCoin2({\n            ...coin2,\n            balance: data.balance,\n          });\n        });\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  return (\n    <div>\n      {/* Liquidity deployer */}\n      <Typography variant=\"h5\" className={classes.title}></Typography>\n\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={props.network.coins}\n        signer={props.network.signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={props.network.coins}\n        signer={props.networksigner}\n      />\n      <WrongNetwork open={wrongNetworkOpen} />\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <Grid item xs={12} className={classes.fullWidth}>\n          <CoinField\n            activeField={true}\n            value={field1Value}\n            onClick={() => setDialog1Open(true)}\n            onChange={handleChange.field1}\n            symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.fullWidth}>\n          <CoinField\n            activeField={true}\n            value={field2Value}\n            onClick={() => setDialog2Open(true)}\n            onChange={handleChange.field2}\n            symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n          />\n        </Grid>\n      </Grid>\n\n      <Grid\n        container\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        spacing={4}\n        className={classes.balance}\n      >\n        <hr className={classes.hr} />\n        <Grid\n          container\n          item\n          className={classes.values}\n          direction=\"column\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          {/* Balance Display */}\n          <Typography variant=\"h6\" style={{ color: \"#fff\" }}>\n            Your Balances\n          </Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography\n                variant=\"body1\"\n                className={classes.balance}\n                style={{ color: \"#9f9f9f\" }}\n              >\n                {formatBalance(coin1.balance, coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography\n                variant=\"body1\"\n                className={classes.balance}\n                style={{ color: \"#9f9f9f\" }}\n              >\n                {formatBalance(coin2.balance, coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Reserves Display */}\n          <Typography variant=\"h6\" style={{ color: \"#fff\" }}>\n            Reserves\n          </Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography\n                variant=\"body1\"\n                className={classes.balance}\n                style={{ color: \"#9f9f9f\" }}\n              >\n                {formatReserve(reserves[0], coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography\n                variant=\"body1\"\n                className={classes.balance}\n                style={{ color: \"#9f9f9f\" }}\n              >\n                {formatReserve(reserves[1], coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Liquidity Tokens Display */}\n          <Typography variant=\"h6\" style={{ color: \"#fff\" }}>\n            Your Liquidity Pool Tokens\n          </Typography>\n          <Grid container direction=\"row\" justifyContent=\"center\">\n            <Grid item xs={6}>\n              <Typography\n                variant=\"body1\"\n                className={classes.balance}\n                style={{ color: \"#9f9f9f\" }}\n              >\n                {formatReserve(liquidityTokens, \"UNI-V2\")}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Paper className={classes.paperContainer}>\n          {/*Red  Display to show the quote */}\n          <Grid\n            container\n            item\n            direction=\"column\"\n            alignItems=\"center\"\n            spacing={2}\n            className={classes.fullWidth}\n          >\n            {/* Tokens in */}\n            <Typography variant=\"h6\" color=\"secondary\">\n              Tokens in\n            </Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography\n                  variant=\"body1\"\n                  className={classes.balance}\n                  color=\"secondary\"\n                >\n                  {formatBalance(liquidityOut[0], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography\n                  variant=\"body1\"\n                  className={classes.balance}\n                  color=\"secondary\"\n                >\n                  {formatBalance(liquidityOut[1], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} style={{ color: \"#000\" }} />\n\n            {/* Liquidity Tokens Display */}\n            <Typography variant=\"h6\" color=\"secondary\">\n              Liquidity Pool Tokens Out\n            </Typography>\n            <Grid container direction=\"row\" justifyContent=\"center\">\n              <Grid item xs={6}>\n                <Typography\n                  variant=\"body1\"\n                  className={classes.balance}\n                  color=\"secondary\"\n                >\n                  {formatReserve(liquidityOut[2], \"UNI-V2\")}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Paper>\n\n        <hr className={classes.hr} />\n      </Grid>\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <LoadingButton\n          loading={loading}\n          valid={isButtonEnabled()}\n          success={false}\n          fail={false}\n          onClick={deploy}\n          style={{ color: \"#000\" }}\n        >\n          <AccountBalanceIcon className={classes.buttonIcon} />\n          Deploy\n        </LoadingButton>\n      </Grid>\n    </div>\n  );\n}\n\nexport default LiquidityDeployer;\n","import React, { useEffect, useCallback } from \"react\";\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport { useSnackbar } from \"notistack\";\nimport { getBalanceAndSymbol, getReserves } from \"../ethereumFunctions\";\nimport { removeLiquidity, quoteRemoveLiquidity } from \"./LiquidityFunctions\";\nimport {\n  RemoveLiquidityField1,\n  RemoveLiquidityField2,\n} from \"../CoinSwapper/CoinField\";\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(3),\n    width: \"40%\",\n    overflow: \"wrap\",\n    background: \"#00CFFF\",\n    color: \"white\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  values: {\n    width: \"50%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction LiquidityRemover(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen] = React.useState(false);\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Stores the liquidity tokens balance of the user\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\");\n\n  // Stores the input and output for the liquidity removal preview\n  const [tokensOut, setTokensOut] = React.useState([0, 0, 0]);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = useCallback(() => {\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n    const parsedInput = parseFloat(field1Value);\n    return (\n      coin1.address &&\n      coin2.address &&\n      !isNaN(parsedInput) &&\n      0 < parsedInput &&\n      parsedInput <= liquidityTokens\n    );\n  }, [coin1.address, coin2.address, field1Value, liquidityTokens]);\n\n  const remove = () => {\n    console.log(\"Attempting to remove liquidity...\");\n    setLoading(true);\n\n    removeLiquidity(\n      coin1.address,\n      coin2.address,\n      field1Value,\n      0,\n      0,\n      props.network.router,\n      props.network.account,\n      props.network.signer,\n      props.network.factory\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        enqueueSnackbar(\"Removal Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(\n        props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n      ).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(\n        props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n      ).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address && props.network.account) {\n      getReserves(\n        coin1.address,\n        coin2.address,\n        props.network.factory,\n        props.network.signer,\n        props.network.account\n      ).then((data) => {\n        setReserves([data[0], data[1]]);\n        setLiquidityTokens(data[2]);\n      });\n    }\n  }, [\n    coin1.address,\n    coin2.address,\n    props.network.account,\n    props.network.factory,\n    props.network.signer,\n  ]);\n\n  // This hook is called when either of the state variables `field1Value`, `coin1.address` or `coin2.address` change.\n  // It will give a preview of the liquidity removal.\n  useEffect(() => {\n    if (isButtonEnabled()) {\n      console.log(\"Trying to preview the liquidity removal\");\n      quoteRemoveLiquidity(\n        coin1.address,\n        coin2.address,\n        field1Value,\n        props.network.factory,\n        props.network.signer\n      ).then((data) => {\n        setTokensOut(data);\n      });\n    }\n  }, [\n    coin1.address,\n    coin2.address,\n    field1Value,\n    props.network.factory,\n    props.network.signer,\n    isButtonEnabled,\n  ]);\n\n  useEffect(() => {\n    // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n    // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n\n    const coinTimeout = setTimeout(() => {\n      console.log(\"Checking balances & Getting reserves...\");\n\n      if (coin1.address && coin2.address && props.network.account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          props.network.factory,\n          props.network.signer,\n          props.network.account\n        ).then((data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        });\n      }\n\n      if (coin1.address && props.network.account && !wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin1.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n        ).then((data) => {\n          setCoin1({\n            ...coin1,\n            balance: data.balance,\n          });\n        });\n      }\n      if (coin2.address && props.network.account && !wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin2.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n        ).then((data) => {\n          setCoin2({\n            ...coin2,\n            balance: data.balance,\n          });\n        });\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  return (\n    <div>\n      {/* Coin Swapper */}\n      <Typography variant=\"h5\" className={classes.title}></Typography>\n\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={props.network.coins}\n        signer={props.network.signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={props.network.coins}\n        signer={props.network.signer}\n      />\n      <WrongNetwork open={wrongNetworkOpen} />\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <Grid item xs={12} className={classes.fullWidth}>\n          <RemoveLiquidityField1\n            activeField={true}\n            value={field1Value}\n            onClick={() => setDialog1Open(true)}\n            onChange={handleChange.field1}\n            symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.fullWidth}>\n          <RemoveLiquidityField2\n            activeField={true}\n            onClick={() => setDialog2Open(true)}\n            symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n          />\n        </Grid>\n      </Grid>\n\n      <Grid\n        container\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        spacing={4}\n        className={classes.balance}\n      >\n        <hr className={classes.hr} />\n        <Grid\n          container\n          item\n          className={classes.values}\n          direction=\"column\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          {/* Balance Display */}\n          <Typography variant=\"h6\" style={{ color: \"#fff\" }}>\n            Your Balances\n          </Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography\n                variant=\"body1\"\n                className={classes.balance}\n                style={{ color: \"#9f9f9f\" }}\n              >\n                {formatBalance(coin1.balance, coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography\n                variant=\"body1\"\n                className={classes.balance}\n                style={{ color: \"#9f9f9f\" }}\n              >\n                {formatBalance(coin2.balance, coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Reserves Display */}\n          <Typography variant=\"h6\" style={{ color: \"#fff\" }}>\n            Reserves\n          </Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography\n                variant=\"body1\"\n                className={classes.balance}\n                style={{ color: \"#9f9f9f\" }}\n              >\n                {formatReserve(reserves[0], coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography\n                variant=\"body1\"\n                className={classes.balance}\n                style={{ color: \"#9f9f9f\" }}\n              >\n                {formatReserve(reserves[1], coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Liquidity Tokens Display */}\n          <Typography variant=\"h6\" style={{ color: \"#fff\" }}>\n            Your Liquidity Pool Tokens\n          </Typography>\n          <Grid container direction=\"row\" justifyContent=\"center\">\n            <Grid item xs={6}>\n              <Typography\n                variant=\"body1\"\n                className={classes.balance}\n                style={{ color: \"#9f9f9f\" }}\n              >\n                {formatReserve(liquidityTokens, \"UNI-V2\")}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <Paper className={classes.paperContainer}>\n          {/*Red  Display to show the quote */}\n          <Grid\n            container\n            item\n            direction=\"column\"\n            alignItems=\"center\"\n            spacing={2}\n            className={classes.fullWidth}\n          >\n            {/* Tokens in */}\n            <Typography variant=\"h6\" color=\"secondary\">\n              Liquidity Pool Tokens in\n            </Typography>\n            <Grid container direction=\"row\" justifyContent=\"center\">\n              <Grid item xs={6}>\n                <Typography\n                  variant=\"body1\"\n                  className={classes.balance}\n                  color=\"secondary\"\n                >\n                  {formatBalance(tokensOut[0], \"UNI-V2\")}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} style={{ color: \"#000\" }} />\n\n            {/* Liquidity Tokens Display */}\n            <Typography variant=\"h6\" color=\"secondary\">\n              Tokens Out\n            </Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography\n                  variant=\"body1\"\n                  className={classes.balance}\n                  color=\"secondary\"\n                >\n                  {formatBalance(tokensOut[1], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography\n                  variant=\"body1\"\n                  className={classes.balance}\n                  color=\"secondary\"\n                >\n                  {formatBalance(tokensOut[2], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Paper>\n        <hr className={classes.hr} />\n      </Grid>\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <LoadingButton\n          loading={loading}\n          valid={isButtonEnabled()}\n          success={false}\n          fail={false}\n          onClick={remove}\n          style={{ color: \"#000\" }}\n        >\n          <ArrowDownwardIcon className={classes.buttonIcon} />\n          Remove\n        </LoadingButton>\n      </Grid>\n    </div>\n  );\n}\n\nexport default LiquidityRemover;\n","import React from \"react\";\nimport { Container, makeStyles, Paper, Typography } from \"@material-ui/core\";\n\nimport SwitchButton from \"./SwitchButton\";\nimport LiquidityDeployer from \"./LiquidityDeployer\";\nimport LiquidityRemover from \"./RemoveLiquidity\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    maxWidth: 700,\n    margin: \"auto\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  footer: {\n    marginTop: \"155px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction Liquidity(props) {\n  const classes = useStyles();\n\n  const [deploy, setDeploy] = React.useState(true);\n\n  const deploy_or_remove = (deploy) => {\n    if (deploy === true) {\n      return <LiquidityDeployer network={props.network} />;\n    }\n    return <LiquidityRemover network={props.network} />;\n  };\n\n  return (\n    <div>\n      <Container>\n        <Paper className={classes.paperContainer}>\n          <Typography variant=\"h5\" className={classes.title}>\n            <SwitchButton setDeploy={setDeploy} />\n          </Typography>\n\n          {deploy_or_remove(deploy)}\n        </Paper>\n      </Container>\n\n      {/* <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n          Alternative Uniswap Interface | Get AUT for use in the bakerloo testnet{\" \"}\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\n        </p>\n      </Grid> */}\n    </div>\n  );\n}\n\nexport default Liquidity;\n","import React from \"react\";\nimport \"./App.css\";\nimport Web3Provider from \"./network\";\nimport NavBar from \"./NavBar/NavBar\";\nimport CoinSwapper from \"./CoinSwapper/CoinSwapper\";\nimport { Route } from \"react-router-dom\";\nimport { SnackbarProvider } from \"notistack\";\nimport Liquidity from \"./Liquidity/Liquidity\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#00CFFF\",\n      contrastText: \"#000\",\n    },\n    secondary: {\n      main: \"#000000\",\n      contrastText: \"#9f9f9f\",\n    },\n    background: {\n      default: \"#000000\",\n      paper: \"#10141A\",\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <SnackbarProvider maxSnack={3}>\n        <ThemeProvider theme={theme}>\n          <Web3Provider\n            render={(network) => (\n              <div>\n                <NavBar />\n                <Route exact path=\"/\">\n                  <CoinSwapper network={network} />\n                </Route>\n\n                <Route exact path=\"/liquidity\">\n                  <Liquidity network={network} />\n                </Route>\n              </div>\n            )}\n          ></Web3Provider>\n        </ThemeProvider>\n      </SnackbarProvider>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}