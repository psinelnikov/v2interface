{"version":3,"sources":["Components/connectWalletPage.js","constants/chains.js","constants/coins.js","ethereumFunctions.js","network.js","NavBar/MenuItems.js","NavBar/NavBar.js","CoinSwapper/CoinField.js","CoinSwapper/CoinButton.js","CoinSwapper/CoinDialog.js","Components/LoadingButton.js","Components/wrongNetwork.js","CoinSwapper/CoinSwapper.js","Liquidity/SwitchButton.js","Liquidity/LiquidityFunctions.js","Liquidity/LiquidityDeployer.js","Liquidity/RemoveLiquidity.js","Liquidity/Liquidity.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","paperContainer","borderRadius","spacing","padding","paddingBottom","maxWidth","margin","marginTop","fullWidth","width","title","textAlign","marginBottom","hr","balance","overflow","buttonIcon","marginRight","footer","ConnectWalletPage","classes","Container","Paper","className","Typography","variant","color","networks","ChainId","routerAddress","Map","set","COINS","chains","name","abbr","address","ROUTER","require","ERC20","FACTORY","PAIR","getNetwork","provider","a","network","chainId","getRouter","signer","Contract","abi","getWeth","getFactory","getAccount","window","ethereum","request","method","accounts","getDecimals","token","decimals","then","result","catch","error","console","log","getBalanceAndSymbol","accountAddress","weth_address","coins","getBalance","balanceRaw","ethers","utils","formatEther","symbol","tokenDecimals","balanceOf","address1","address2","amount","routerContract","tokens","time","Math","floor","Date","now","deadline","BigNumber","from","token1","amountIn","parseUnits","callStatic","getAmountsOut","amountOut","approve","WETH","wethAddress","swapExactETHForTokens","value","swapExactTokensForETH","swapExactTokensForTokens","token1Decimals","token2","token2Decimals","String","values_out","amount_out","Number","fetchReserves","pair","coin1","coin2","coin1Decimals","coin2Decimals","getReserves","reservesRaw","token0","results","factory","getPair","pairAddress","liquidityTokens_BN","liquidityTokens","toPrecision","createTheme","palette","primary","main","contrastText","secondary","Web3Provider","props","useState","isConnected","setConnected","Object","create","useRef","account","chainID","router","weth","backgroundListener","setupConnection","providers","getSigner","includes","get","factory_address","createListener","setInterval","useEffect","current","clearInterval","listener","render","MenuItems","url","cName","NavBar","state","clicked","map","item","index","to","Component","container","minHeight","backgroundColor","COLORS","borderColor","borderWidth","borderStyle","container_input","marginLeft","container_blank","grid","height","fab","zIndex","input","typography","h5","inputBase","RemoveLiquidityField1","onClick","onChange","activeField","Grid","direction","justifyContent","alignItems","xs","Fab","size","InputBase","placeholder","disabled","root","RemoveLiquidityField2","CoinField","button","paddingTop","coinName","opacity","CoinButton","coinAbbr","ButtonBase","focusRipple","styles","dialogContainer","titleSection","titleText","alignSelf","paddingLeft","paddingRight","coinList","overflowY","coinContainer","DialogTitle","withStyles","children","onClose","other","disableTypography","alignContent","IconButton","aria-label","DialogActions","MuiDialogActions","CoinDialog","open","React","setAddress","setError","exit","Dialog","undefined","paper","TextField","e","target","helperText","coin","Button","autoFocus","err","doesTokenExist","wrapper","position","progress","green","top","left","LoadingButton","loading","valid","success","fail","type","CircularProgress","WrongNetwork","switchButton","CoinSwapper","enqueueSnackbar","useSnackbar","dialog1Open","setDialog1Open","dialog2Open","setDialog2Open","wrongNetworkOpen","setCoin1","setCoin2","reserves","setReserves","field1Value","setField1Value","field2Value","setField2Value","setLoading","switchFields","reverse","handleChange","field1","formatBalance","parseFloat","formatReserve","reserve","data","isNaN","getAmountOut","toFixed","coinTimeout","setTimeout","clearTimeout","fontSize","parsedInput1","parsedInput2","isButtonEnabled","swapTokens","message","autoHideDuration","SwitchButton","setDeploy","changeStyles","K","document","getElementById","style","ButtonGroup","id","text","amount1","amount2","amount1min","amount2min","amountIn1","amountIn2","amount1Min","amount2Min","addLiquidityETH","addLiquidity","liquidity_tokens","liquidity","Getliquidity","removeLiquidityETH","removeLiquidity","quote","reserve1","reserve2","quoteMintLiquidity","amountA","amountB","MINIMUM_LIQUIDITY","_reserveA","_reserveB","totalSupply","reserveA","reserveB","_totalSupply","valueA","valueB","sqrt","min","amountADesired","amountBDesired","amountBOptimal","amountAOptimal","feeTo","feeOn","kLast","_kLast","feeLiquidity","Aout","Bout","background","values","LiquidityDeployer","setLiquidityTokens","liquidityOut","setLiquidityOut","oldField1Value","oldField2Value","field2","NaN","quoteAddLiquidity","networksigner","LiquidityRemover","tokensOut","setTokensOut","parsedInput","quoteRemoveLiquidity","Liquidity","deploy","deploy_or_remove","App","maxSnack","ThemeProvider","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.06104936.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    maxWidth: 700,\n    margin: \"auto\",\n    marginTop: \"200px\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n  footer: {\n    marginTop: \"155px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction ConnectWalletPage() {\n  const classes = useStyles();\n  return (\n    <div>\n      {/* <div className=\"Title\">\n        <h1 className=\"navbar-logo\">Uniswap v2 Interface</h1>\n      </div> */}\n\n      <Container>\n        <Paper className={classes.paperContainer}>\n          <Typography\n            variant=\"h6\"\n            className={classes.title}\n            color=\"common.white\"\n          >\n            Please connect an Ethereum wallet to your browser to use the\n            application\n          </Typography>\n        </Paper>\n      </Container>\n\n      {/* <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>Uniswap v2 Interface</p>\n      </Grid> */}\n    </div>\n  );\n}\n\nexport default ConnectWalletPage;\n","export const networks = [133717];\n\nexport const ChainId = {\n  HYPERION_SEPOLIA: 133717,\n};\n\nexport const routerAddress = new Map();\nrouterAddress.set(\n  ChainId.HYPERION_SEPOLIA,\n  \"0xa1cF48c109f8B5eEe38B406591FE27f11f685a1f\"\n);\n","import * as chains from \"./chains\";\n\n// If you add coins for a new network, make sure Weth address (for the router you are using) is the first entry\n\nconst HYPERION_SEPOLIACoins = [\n  {\n    name: \"Metis\",\n    abbr: \"METIS\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Dai\",\n    abbr: \"DAI\",\n    address: \"0xc4c33c42684ad16e84800c25d5dE7B650E9F95Ca\",\n  },\n  {\n    name: \"Wrapped Ethereum\",\n    abbr: \"WETH\",\n    address: \"0x9AB236Ec38492099a4d35552e6dC7D9442607f9A\",\n  },\n  {\n    name: \"Wrapped Bitcoin\",\n    abbr: \"WBTC\",\n    address: \"0x63d940F5b04235aba7E921a3b508aB1360D32706\",\n  },\n  {\n    name: \"Tether USD\",\n    abbr: \"USDT\",\n    address: \"0x3c099E287eC71b4AA61A7110287D715389329237\",\n  },\n];\n\nconst COINS = new Map();\nCOINS.set(chains.ChainId.HYPERION_SEPOLIA, HYPERION_SEPOLIACoins);\nexport default COINS;\n","import { Contract, ethers } from \"ethers\";\nimport * as chains from \"./constants/chains\";\nimport COINS from \"./constants/coins\";\n\nconst ROUTER = require(\"./build/UniswapV2Router02.json\");\nconst ERC20 = require(\"./build/ERC20.json\");\nconst FACTORY = require(\"./build/IUniswapV2Factory.json\");\nconst PAIR = require(\"./build/IUniswapV2Pair.json\");\n\nexport function getProvider() {\n  return new ethers.providers.Web3Provider(window.ethereum);\n}\n\nexport function getSigner(provider) {\n  return provider.getSigner();\n}\n\nexport async function getNetwork(provider) {\n  const network = await provider.getNetwork();\n  return network.chainId;\n}\n\nexport function getRouter(address, signer) {\n  return new Contract(address, ROUTER.abi, signer);\n}\n\nexport async function checkNetwork(provider) {\n  const chainId = getNetwork(provider);\n  if (chains.networks.includes(chainId)){\n    return true\n  }\n  return false;\n}\n\nexport function getWeth(address, signer) {\n  return new Contract(address, ERC20.abi, signer);\n}\n\nexport function getFactory(address, signer) {\n  return new Contract(address, FACTORY.abi, signer);\n}\n\nexport async function getAccount() {\n  const accounts = await window.ethereum.request({\n    method: \"eth_requestAccounts\",\n  });\n\n  return accounts[0];\n}\n\n//This function checks if a ERC20 token exists for a given address\n//    `address` - The Ethereum address to be checked\n//    `signer` - The current signer\nexport function doesTokenExist(address, signer) {\n  try {\n    return new Contract(address, ERC20.abi, signer);\n  } catch (err) {\n    return false;\n  }\n}\n\nexport async function getDecimals(token) {\n  const decimals = await token.decimals().then((result) => {\n      return result;\n    }).catch((error) => {\n      console.log('No tokenDecimals function for this token, set to 0');\n      return 0;\n    });\n    return decimals;\n}\n\n// This function returns an object with 2 fields: `balance` which container's the account's balance in the particular token,\n// and `symbol` which is the abbreviation of the token name. To work correctly it must be provided with 4 arguments:\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `address` - An Ethereum address of the token to check for (either a token or AUT)\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function getBalanceAndSymbol(\n  accountAddress,\n  address,\n  provider,\n  signer,\n  weth_address,\n  coins\n) {\n  try {\n    if (address === weth_address) {\n      const balanceRaw = await provider.getBalance(accountAddress);\n\n      return {\n        balance: ethers.utils.formatEther(balanceRaw),\n        symbol: coins[0].abbr,\n      };\n    } else {\n      const token = new Contract(address, ERC20.abi, signer);\n      const tokenDecimals = await getDecimals(token);\n      const balanceRaw = await token.balanceOf(accountAddress);\n      const symbol = await token.symbol();\n\n      return {\n        balance: balanceRaw*10**(-tokenDecimals),\n        symbol: symbol,\n      };\n    }\n  } catch (error) {\n    console.log ('The getBalanceAndSymbol function had an error!');\n    console.log (error)\n    return false;\n  }\n}\n\n// This function swaps two particular tokens / AUT, it can handle switching from AUT to ERC20 token, ERC20 token to AUT, and ERC20 token to ERC20 token.\n// No error handling is done, so any issues can be caught with the use of .catch()\n// To work correctly, there needs to be 7 arguments:\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\n//    `amount` - A float or similar number representing the value of address1's token to trade\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `signer` - The current signer\nexport async function swapTokens(\n  address1,\n  address2,\n  amount,\n  routerContract,\n  accountAddress,\n  signer\n) {\n  const tokens = [address1, address2];\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const tokenDecimals = await getDecimals(token1);\n  \n  const amountIn = ethers.utils.parseUnits(amount, tokenDecimals);\n  const amountOut = await routerContract.callStatic.getAmountsOut(\n    amountIn,\n    tokens\n  );\n\n  await token1.approve(routerContract.address, amountIn);\n  const wethAddress = await routerContract.WETH();\n\n  if (address1 === wethAddress) {\n    // Eth -> Token\n    await routerContract.swapExactETHForTokens(\n      amountOut[1],\n      tokens,\n      accountAddress,\n      deadline,\n      { value: amountIn }\n    );\n  } else if (address2 === wethAddress) {\n    // Token -> Eth\n    await routerContract.swapExactTokensForETH(\n      amountIn,\n      amountOut[1],\n      tokens,\n      accountAddress,\n      deadline\n    );\n  } else {\n    await routerContract.swapExactTokensForTokens(\n      amountIn,\n      amountOut[1],\n      tokens,\n      accountAddress,\n      deadline\n    );\n  }\n}\n\n//This function returns the conversion rate between two token addresses\n//    `address1` - An Ethereum address of the token to swaped from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to swaped to (either a token or AUT)\n//    `amountIn` - Amount of the token at address 1 to be swaped from\n//    `routerContract` - The router contract to carry out this swap\nexport async function getAmountOut(\n  address1,\n  address2,\n  amountIn,\n  routerContract,\n  signer\n) {\n  try {\n    const token1 = new Contract(address1, ERC20.abi, signer);\n    const token1Decimals = await getDecimals(token1);\n\n    const token2 = new Contract(address2, ERC20.abi, signer);\n    const token2Decimals = await getDecimals(token2);\n\n    const values_out = await routerContract.getAmountsOut(\n      ethers.utils.parseUnits(String(amountIn), token1Decimals),\n      [address1, address2]\n    );\n    const amount_out = values_out[1]*10**(-token2Decimals);\n    console.log('amount out: ', amount_out)\n    return Number(amount_out);\n  } catch {\n    return false;\n  }\n}\n\n// This function calls the pair contract to fetch the reserves stored in a the liquidity pool between the token of address1 and the token\n// of address2. Some extra logic was needed to make sure that the results were returned in the correct order, as\n// `pair.getReserves()` would always return the reserves in the same order regardless of which order the addresses were.\n//    `address1` - An Ethereum address of the token to trade from (either a ERC20 token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a ERC20 token or AUT)\n//    `pair` - The pair contract for the two tokens\nexport async function fetchReserves(address1, address2, pair, signer) {\n  try {\n\n    // Get decimals for each coin\n    const coin1 = new Contract(address1, ERC20.abi, signer);\n    const coin2 = new Contract(address2, ERC20.abi, signer);\n\n    const coin1Decimals = await getDecimals(coin1);\n    const coin2Decimals = await getDecimals(coin2);\n\n    // Get reserves\n    const reservesRaw = await pair.getReserves();\n\n    // Put the results in the right order\n    const results =  [\n      (await pair.token0()) === address1 ? reservesRaw[0] : reservesRaw[1],\n      (await pair.token1()) === address2 ? reservesRaw[1] : reservesRaw[0],\n    ];\n\n    // Scale each to the right decimal place\n    return [\n      (results[0]*10**(-coin1Decimals)),\n      (results[1]*10**(-coin2Decimals))\n    ]\n  } catch (err) {\n    console.log(\"error!\");\n    console.log(err);\n    return [0, 0];\n  }\n}\n\n// This function returns the reserves stored in a the liquidity pool between the token of address1 and the token\n// of address2, as well as the liquidity tokens owned by accountAddress for that pair.\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\n//    `factory` - The current factory\n//    `signer` - The current signer\nexport async function getReserves(\n  address1,\n  address2,\n  factory,\n  signer,\n  accountAddress\n) {\n  try {\n    const pairAddress = await factory.getPair(address1, address2);\n    const pair = new Contract(pairAddress, PAIR.abi, signer);\n  \n    if (pairAddress !== '0x0000000000000000000000000000000000000000'){\n  \n      const reservesRaw = await fetchReserves(address1, address2, pair, signer);\n      const liquidityTokens_BN = await pair.balanceOf(accountAddress);\n      const liquidityTokens = Number(\n        ethers.utils.formatEther(liquidityTokens_BN)\n      );\n    \n      return [\n        reservesRaw[0].toPrecision(6),\n        reservesRaw[1].toPrecision(6),\n        liquidityTokens,\n      ];\n    } else {\n      console.log(\"no reserves yet\");\n      return [0,0,0];\n    }\n  }catch (err) {\n    console.log(\"error!\");\n    console.log(err);\n    return [0, 0, 0];\n  }\n}\n","import { useEffect, useState, useRef } from \"react\";\nimport { Contract, ethers } from \"ethers\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\nimport { SnackbarProvider } from \"notistack\";\nimport ConnectWalletPage from \"./Components/connectWalletPage\";\nimport {\n  getAccount,\n  getFactory,\n  getRouter,\n  getNetwork,\n  getWeth,\n} from \"./ethereumFunctions\";\nimport COINS from \"./constants/coins\";\nimport * as chains from \"./constants/chains\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#ff0000\",\n      contrastText: \"#ffffff\",\n    },\n    secondary: {\n      main: \"#9e9e9e\",\n      contrastText: \"#ffffff\",\n    },\n  },\n});\n\nconst autoReconnectDelay = 5000;\n\nconst Web3Provider = (props) => {\n  const [isConnected, setConnected] = useState(true);\n  let network = Object.create( {} )\n  network.provider = useRef(null);\n  network.signer = useRef(null);\n  network.account = useRef(null);\n  network.coins = [];\n  network.chainID = useRef(null);\n  network.router = useRef(null);\n  network.factory = useRef(null);\n  network.weth = useRef(null);\n  const backgroundListener = useRef(null);\n  async function setupConnection() {\n    try {\n      console.log('lets go!');\n      network.provider = new ethers.providers.Web3Provider(window.ethereum);\n      network.signer = await network.provider.getSigner();\n      await getAccount().then(async (result) => {\n        network.account = result;\n      });\n\n      await getNetwork(network.provider).then(async (chainId) => {\n        // Set chainID\n        network.chainID = chainId;\n        if (chains.networks.includes(chainId)) {\n          // Get the router using the chainID\n          network.router = await getRouter(\n            chains.routerAddress.get(chainId),\n            network.signer\n          );\n          // Get default coins for network\n          network.coins = COINS.get(chainId);\n          // Get Weth address from router\n          await network.router.WETH().then((wethAddress) => {\n            network.weth = getWeth(wethAddress, network.signer);\n            // Set the value of the weth address in the default coins array\n            network.coins[0].address = wethAddress;\n          });\n          // Get the factory address from the router\n          await network.router.factory().then((factory_address) => {\n            network.factory = getFactory(\n              factory_address,\n              network.signer\n            );\n          });\n          setConnected(true);\n        } else {\n          console.log(\"Wrong network mate.\");\n          setConnected(false);\n        }\n      });\n\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  async function createListener() {\n    return setInterval(async () => {\n      // console.log(\"Heartbeat\");\n      try {\n        // Check the account has not changed\n        const account = await getAccount();\n        if (account != network.account) {\n          await setupConnection();\n        }\n        // const chainID = await getNetwork(network.provider);\n        // if (chainID !== network.chainID){\n        //   setConnected(false);\n        //   await setupConnection();\n        // }\n      } catch (e) {\n        setConnected(false);\n        await setupConnection();\n      }\n    }, 1000);\n  }\n\n  useEffect(async () => {\n    // Initial setup\n    console.log(\"Initial hook\");\n    await setupConnection();\n    console.log(\"network: \", network);\n\n    // Start background listener\n    if (backgroundListener.current != null) {\n      clearInterval(backgroundListener.current);\n    }\n    const listener = createListener();\n    backgroundListener.current = listener;\n    return () => clearInterval(backgroundListener.current);\n  }, []);\n\n  const renderNotConnected = () => {\n    console.log(\"Rendering\");\n    return (\n      <div className=\"App\">\n        <div>\n          <ConnectWalletPage />\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      {!isConnected && renderNotConnected()}\n      {isConnected && <div> {props.render(network)}</div>}\n    </>\n  );\n};\n\nexport default Web3Provider;\n","export const MenuItems = [\n  {\n    title: \"Swap\",\n    url: \"/\",\n    cName: \"nav-links\",\n  },\n  {\n    title: \"Liquidity\",\n    url: \"/liquidity\",\n    cName: \"nav-links\",\n  },\n];\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { MenuItems } from \"./MenuItems\";\nimport \"./NavBar.css\";\n\nclass NavBar extends Component {\n  state = { clicked: false };\n\n  render() {\n    return (\n      <nav>\n        {/* <div className=\"Title\">\n          <h1 className=\"navbar-logo\">\n            Alternative Uniswap Interface\n          </h1>\n        </div> */}\n\n        <div className=\"NavbarItems\">\n          <ul className={`nav-menu`}>\n            {MenuItems.map((item, index) => {\n              return (\n                <li key={index}>\n                  <Link className={\"nav-links\"} to={item.url}>\n                    {item.title}\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport { Fab, Grid, InputBase, makeStyles } from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(1),\n    minHeight: \"80px\",\n    backgroundColor: COLORS.grey[50],\n    borderRadius: theme.spacing(2),\n    borderColor: COLORS.grey[300],\n    borderWidth: \"1px\",\n    borderStyle: \"solid\",\n  },\n  container_input: {\n    padding: theme.spacing(1),\n    minHeight: \"68px\",\n    backgroundColor: COLORS.grey[50],\n    borderRadius: theme.spacing(2),\n    borderColor: COLORS.grey[300],\n    borderWidth: \"1px\",\n    borderStyle: \"solid\",\n    marginLeft: \"50%\",\n    textAlign: \"right\",\n  },\n  container_blank: {\n    padding: theme.spacing(1),\n    minHeight: \"80px\",\n    borderRadius: theme.spacing(2),\n  },\n  grid: {\n    height: \"60px\",\n  },\n  fab: {\n    zIndex: \"0\",\n  },\n  input: {\n    ...theme.typography.h5,\n    width: \"100%\",\n  },\n  inputBase: {\n    textAlign: \"right\",\n  },\n}));\n\nCoinField.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  symbol: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  activeField: PropTypes.bool.isRequired,\n};\n\nexport function RemoveLiquidityField1(props) {\n  // This component is used to selecting a coin and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol, value, onChange, activeField } = props;\n  return (\n    <div className={classes.container_blank}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n        {/* Text Field */}\n        <Grid item xs={9}>\n          <InputBase\n            value={value}\n            onChange={onChange}\n            placeholder=\"0.0\"\n            disabled={!activeField}\n            classes={{\n              root: classes.container_input,\n              input: classes.inputBase,\n            }}\n          />\n        </Grid>\n        {/* </div> */}\n      </Grid>\n    </div>\n  );\n}\n\nexport function RemoveLiquidityField2(props) {\n  // This component is used to selecting a coin and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol } = props;\n\n  return (\n    <div className={classes.container_blank}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default function CoinField(props) {\n  // This component is used to selecting a token and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol, value, onChange, activeField } = props;\n\n  return (\n    <div className={classes.container}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n\n        {/* Text Field */}\n        <Grid item xs={9}>\n          <InputBase\n            value={value}\n            onChange={onChange}\n            placeholder=\"0.0\"\n            disabled={!activeField}\n            classes={{ root: classes.input, input: classes.inputBase }}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { ButtonBase, Grid, makeStyles, Typography } from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    width: \"100%\",\n    paddingTop: theme.spacing(0.5),\n    paddingBottom: theme.spacing(0.5),\n    \"&:hover, &$focusVisible\": {\n      backgroundColor: COLORS.grey[200],\n    },\n  },\n  coinName: {\n    opacity: 0.6,\n  },\n}));\n\nCoinButton.propTypes = {\n  coinName: PropTypes.string.isRequired,\n  coinAbbr: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default function CoinButton(props) {\n  const { coinName, coinAbbr, onClick, ...other } = props;\n  const classes = useStyles();\n\n  return (\n    <ButtonBase focusRipple className={classes.button} onClick={onClick}>\n      <Grid container direction=\"column\">\n        <Typography variant=\"h6\">{coinAbbr}</Typography>\n        <Typography variant=\"body2\" className={classes.coinName}>\n          {coinName}\n        </Typography>\n      </Grid>\n    </ButtonBase>\n  );\n}\n","import React from \"react\";\nimport {\n  Button,\n  Dialog,\n  Grid,\n  IconButton,\n  makeStyles,\n  TextField,\n  Typography,\n  withStyles,\n} from \"@material-ui/core\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport CoinButton from \"./CoinButton\";\nimport { doesTokenExist } from \"../ethereumFunctions\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst styles = (theme) => ({\n  dialogContainer: {\n    borderRadius: theme.spacing(2),\n  },\n  titleSection: {\n    padding: theme.spacing(2),\n  },\n  titleText: {\n    alignSelf: \"center\",\n  },\n  hr: {\n    margin: 0,\n  },\n  address: {\n    paddingLeft: theme.spacing(2.5),\n    paddingRight: theme.spacing(2.5),\n    paddingBottom: theme.spacing(2),\n  },\n  coinList: {\n    height: \"300px\",\n    overflowY: \"scroll\",\n  },\n  coinContainer: {\n    paddingLeft: theme.spacing(0.5),\n    paddingRight: theme.spacing(0.5),\n    paddingTop: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    overflow: \"hidden\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\n// This is a modified version of MaterialUI's DialogTitle component, I've added a close button in the top right corner\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle\n      disableTypography\n      className={classes.titleSection}\n      {...other}\n    >\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignContent=\"center\"\n      >\n        <Typography variant=\"h6\" className={classes.titleText}>\n          {children}\n        </Typography>\n        {onClose ? (\n          <IconButton aria-label=\"close\" onClick={onClose}>\n            <CloseIcon />\n          </IconButton>\n        ) : null}\n      </Grid>\n    </MuiDialogTitle>\n  );\n});\n\n// This is a modified version of MaterialUI's DialogActions component, the color has been changed by modifying the CSS\nconst DialogActions = withStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n    backgroundColor: COLORS.grey[100],\n  },\n}))(MuiDialogActions);\n\nCoinDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  coins: PropTypes.array.isRequired,\n};\n\nexport default function CoinDialog(props) {\n  // The CoinDialog component will display a dialog window on top of the page, allowing a user to select a coin\n  // from a list (list can be found in 'src/constants/coins.js') or enter an address into a search field. Any entered\n  // addresses will first be validated to make sure they exist.\n  // When the dialog closes, it will call the `onClose` prop with 1 argument which will either be undefined (if the\n  // user closes the dialog without selecting anything), or will be a string containing the address of a coin.\n\n  const classes = useStyles();\n  const { onClose, open, coins, signer, ...others } = props;\n\n  const [address, setAddress] = React.useState(\"\");\n  const [error, setError] = React.useState(\"\");\n\n  // Called when the user tries to input a custom address, this function will validate the address and will either\n  // then close the dialog and return the validated address, or will display an error.\n  const submit = () => {\n    if (doesTokenExist(address, signer)) {\n      exit(address);\n    } else {\n      setError(\"This address is not valid\");\n    }\n  };\n\n  // Resets any fields in the dialog (in case it's opened in the future) and calls the `onClose` prop\n  const exit = (value) => {\n    setError(\"\");\n    setAddress(\"\");\n    onClose(value);\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={() => exit(undefined)}\n      fullWidth\n      maxWidth=\"sm\"\n      classes={{ paper: classes.dialogContainer }}\n    >\n      <DialogTitle onClose={() => exit(undefined)}>Select Coin</DialogTitle>\n\n      <hr className={classes.hr} />\n\n      <div className={classes.coinContainer}>\n        <Grid container direction=\"column\" spacing={1} alignContent=\"center\">\n          <TextField\n            value={address}\n            onChange={(e) => setAddress(e.target.value)}\n            variant=\"outlined\"\n            placeholder=\"Paste Address\"\n            error={error !== \"\"}\n            helperText={error}\n            fullWidth\n            className={classes.address}\n          />\n\n          <hr className={classes.hr} />\n\n          <Grid item className={classes.coinList}>\n            <Grid container direction=\"column\">\n              {/* Maps all of the tokens in the constants file to buttons */}\n              {coins.map((coin, index) => (\n                <Grid item key={index} xs={12}>\n                  <CoinButton\n                    coinName={coin.name}\n                    coinAbbr={coin.abbr}\n                    onClick={() => exit(coin.address)}\n                  />\n                </Grid>\n              ))}\n            </Grid>\n          </Grid>\n        </Grid>\n      </div>\n\n      <hr className={classes.hr} />\n\n      <DialogActions>\n        <Button autoFocus onClick={submit} color=\"primary\">\n          Enter\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React from \"react\";\nimport { Button, CircularProgress, makeStyles } from \"@material-ui/core\";\nimport green from \"@material-ui/core/colors/green\";\nimport red from \"@material-ui/core/colors/red\";\n\nconst useStyles = makeStyles((theme) => ({\n  wrapper: {\n    margin: 0,\n    position: \"relative\",\n  },\n  progress: {\n    color: green[500],\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    marginTop: -12,\n    marginLeft: -12,\n  },\n}));\n\nexport default function LoadingButton(props) {\n  const classes = useStyles();\n  const { children, loading, valid, success, fail, onClick, ...other } = props;\n  return (\n    <div className={classes.wrapper}>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        fullWidth\n        disabled={loading || !valid}\n        type=\"submit\"\n        onClick={onClick}\n        {...other}\n      >\n        {children}\n      </Button>\n      {loading && <CircularProgress size={24} className={classes.progress} />}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  Dialog,\n  Grid,\n  IconButton,\n  makeStyles,\n  Typography,\n  withStyles,\n} from \"@material-ui/core\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nconst styles = (theme) => ({\n  dialogContainer: {\n    borderRadius: theme.spacing(2),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nexport default function WrongNetwork(props) {\n\n  const classes = useStyles();\n  const {open} = props;\n  return (\n    <Dialog\n      open={open}\n      fullWidth\n      maxWidth=\"sm\"\n      classes={{ paper: classes.dialogContainer }}\n    >\n      <MuiDialogTitle>Unsupported Network</MuiDialogTitle>\n    </Dialog>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport {\n  Container,\n  Grid,\n  IconButton,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport SwapVerticalCircleIcon from \"@material-ui/icons/SwapVerticalCircle\";\nimport { useSnackbar } from \"notistack\";\nimport LoopIcon from \"@material-ui/icons/Loop\";\nimport {\n  getAccount,\n  getFactory,\n  getProvider,\n  getRouter,\n  getSigner,\n  getNetwork,\n  getAmountOut,\n  getBalanceAndSymbol,\n  getWeth,\n  swapTokens,\n  getReserves,\n} from \"../ethereumFunctions\";\nimport CoinField from \"./CoinField\";\nimport CoinDialog from \"./CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\nimport COINS from \"../constants/coins\";\nimport * as chains from \"../constants/chains\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n  },\n  switchButton: {\n    zIndex: 1,\n    margin: \"-16px\",\n    padding: theme.spacing(0.5),\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  footer: {\n    marginTop: \"285px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction CoinSwapper(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setField1Value(field2Value);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n    // If both coins have been selected, and a valid float has been entered which is less than the user's balance, then return true\n    const parsedInput1 = parseFloat(field1Value);\n    const parsedInput2 = parseFloat(field2Value);\n    return (\n      coin1.address &&\n      coin2.address &&\n      !isNaN(parsedInput1) &&\n      !isNaN(parsedInput2) &&\n      0 < parsedInput1 &&\n      parsedInput1 <= coin1.balance\n    );\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(\n        props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n      ).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(\n        props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n      ).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Calls the swapTokens Ethereum function to make the swap, then resets nessicary state variables\n  const swap = () => {\n    console.log(\"Attempting to swap tokens...\");\n    setLoading(true);\n\n    swapTokens(\n      coin1.address,\n      coin2.address,\n      field1Value,\n      props.network.router,\n      props.network.account,\n      props.network.signer\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\n  // are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\n  // the lambda will only ever be called when the component mounts. These are very useful for calculating new values\n  // after a particular state change, for example, calculating the new exchange rate whenever the addresses\n  // of the two coins change.\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get Reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address) {\n      getReserves(\n        coin1.address,\n        coin2.address,\n        props.network.factory,\n        props.network.signer,\n        props.network.account\n      ).then((data) => setReserves(data));\n    }\n  }, [\n    coin1.address,\n    coin2.address,\n    props.network.account,\n    props.network.factory,\n    props.network.router,\n    props.network.signer,\n  ]);\n\n  // This hook is called when either of the state variables `field1Value` `coin1.address` or `coin2.address` change.\n  // It attempts to calculate and set the state variable `field2Value`\n  // This means that if the user types a new value into the conversion box or the conversion rate changes,\n  // the value in the output box will change.\n  useEffect(() => {\n    if (isNaN(parseFloat(field1Value))) {\n      setField2Value(\"\");\n    } else if (parseFloat(field1Value) && coin1.address && coin2.address) {\n      getAmountOut(\n        coin1.address,\n        coin2.address,\n        field1Value,\n        props.network.router,\n        props.network.signer\n      )\n        .then((amount) => setField2Value(amount.toFixed(7)))\n        .catch((e) => {\n          console.log(e);\n          setField2Value(\"NA\");\n        });\n    } else {\n      setField2Value(\"\");\n    }\n  }, [field1Value, coin1.address, coin2.address]);\n\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n  useEffect(() => {\n    const coinTimeout = setTimeout(() => {\n      console.log(\"props: \", props);\n      console.log(\"Checking balances...\");\n\n      if (coin1.address && coin2.address && props.network.account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          props.network.factory,\n          props.network.signer,\n          props.network.account\n        ).then((data) => setReserves(data));\n      }\n\n      if (coin1.address && props.network.account && !wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin1.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n        ).then((data) => {\n          setCoin1({\n            ...coin1,\n            balance: data.balance,\n          });\n        });\n      }\n      if (coin2.address && props.network.account && !wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin2.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n        ).then((data) => {\n          setCoin2({\n            ...coin2,\n            balance: data.balance,\n          });\n        });\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  return (\n    <div>\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={props.network.coins}\n        props={props.network.signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={props.network.coins}\n        signer={props.network.signer}\n      />\n      <WrongNetwork open={wrongNetworkOpen} />\n\n      {/* Coin Swapper */}\n      <Container maxWidth=\"xs\">\n        <Paper className={classes.paperContainer}>\n          <Typography variant=\"h5\" className={classes.title}>\n            Swap Coins\n          </Typography>\n\n          <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n            <Grid item xs={12} className={classes.fullWidth}>\n              <CoinField\n                activeField={true}\n                value={field1Value}\n                onClick={() => setDialog1Open(true)}\n                onChange={handleChange.field1}\n                symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n              />\n            </Grid>\n\n            <IconButton onClick={switchFields} className={classes.switchButton}>\n              <SwapVerticalCircleIcon fontSize=\"medium\" />\n            </IconButton>\n\n            <Grid item xs={12} className={classes.fullWidth}>\n              <CoinField\n                activeField={false}\n                value={field2Value}\n                onClick={() => setDialog2Open(true)}\n                symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n              />\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Balance Display */}\n            <Typography variant=\"h6\">Your Balances</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(coin1.balance, coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(coin2.balance, coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Reserves Display */}\n            <Typography variant=\"h6\">Reserves</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(reserves[0], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(reserves[1], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            <LoadingButton\n              loading={loading}\n              valid={isButtonEnabled()}\n              success={false}\n              fail={false}\n              onClick={swap}\n            >\n              <LoopIcon />\n              Swap\n            </LoadingButton>\n          </Grid>\n        </Paper>\n      </Container>\n\n      {/* <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n        Alternative Uniswap Interface | Get AUT for use in the bakerloo testnet{\" \"}\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\n        </p>\n      </Grid> */}\n    </div>\n  );\n}\n\nexport default CoinSwapper;\n","import React from \"react\";\nimport { ButtonGroup, Button } from \"@material-ui/core\";\n\nexport default function SwitchButton(props) {\n  const { setDeploy } = props;\n\n  const changeStyles = (K) => {\n    if (K === true) {\n      let add_button = document.getElementById(\"add-button\");\n      add_button.style.backgroundColor = \"#ff0000\";\n\n      let remove_button = document.getElementById(\"remove-button\");\n      remove_button.style.backgroundColor = \"#9e9e9e\";\n    } else {\n      let remove_button = document.getElementById(\"remove-button\");\n      remove_button.style.backgroundColor = \"#ff0000\";\n\n      let add_button = document.getElementById(\"add-button\");\n      add_button.style.backgroundColor = \"#9e9e9e\";\n    }\n  };\n\n  return (\n    <div>\n      <ButtonGroup size=\"large\" variant=\"contained\">\n        <Button\n          id=\"add-button\"\n          color=\"primary\"\n          text=\"white\"\n          onClick={() => {\n            setDeploy(true);\n            changeStyles(true);\n          }}\n        >\n          Deploy Liquidity\n        </Button>\n\n        <Button\n          id=\"remove-button\"\n          color=\"secondary\"\n          text=\"white\"\n          onClick={() => {\n            setDeploy(false);\n            changeStyles(false);\n          }}\n        >\n          Remove Liquidity\n        </Button>\n      </ButtonGroup>\n    </div>\n  );\n}\n","import { Contract, ethers } from \"ethers\";\nimport { fetchReserves, getDecimals } from \"../ethereumFunctions\";\n\nconst ERC20 = require(\"../build/ERC20.json\");\nconst PAIR = require(\"../build/IUniswapV2Pair.json\");\n\n// Function used to add Liquidity to any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the coin to add from (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to add to (either a token or AUT)\n//    `amount1` - A float or similar number representing the value of address1's coin to add\n//    `amount2` - A float or similar number representing the value of address2's coin to add\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to add\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to add\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function addLiquidity(\n  address1,\n  address2,\n  amount1,\n  amount2,\n  amount1min,\n  amount2min,\n  routerContract,\n  account,\n  signer\n) {\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const token2 = new Contract(address2, ERC20.abi, signer);\n\n  const token1Decimals = await getDecimals(token1);\n  const token2Decimals = await getDecimals(token2);\n\n  const amountIn1 = ethers.utils.parseUnits(amount1, token1Decimals);\n  const amountIn2 = ethers.utils.parseUnits(amount2, token2Decimals);\n\n  const amount1Min = ethers.utils.parseUnits(amount1min, token1Decimals);\n  const amount2Min = ethers.utils.parseUnits(amount2min, token2Decimals);\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  await token1.approve(routerContract.address, amountIn1);\n  await token2.approve(routerContract.address, amountIn2);\n\n  const wethAddress = await routerContract.WETH();\n\n  console.log([\n    address1,\n    address2,\n    amountIn1,\n    amountIn2,\n    amount1Min,\n    amount2Min,\n    account,\n    deadline,\n  ]);\n\n  if (address1 === wethAddress) {\n    // Eth + Token\n    await routerContract.addLiquidityETH(\n      address2,\n      amountIn2,\n      amount2Min,\n      amount1Min,\n      account,\n      deadline,\n      { value: amountIn1 }\n    );\n  } else if (address2 === wethAddress) {\n    // Token + Eth\n    await routerContract.addLiquidityETH(\n      address1,\n      amountIn1,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline,\n      { value: amountIn2 }\n    );\n  } else {\n    // Token + Token\n    await routerContract.addLiquidity(\n      address1,\n      address2,\n      amountIn1,\n      amountIn2,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  }\n}\n\n// Function used to remove Liquidity from any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `liquidity_tokens` - A float or similar number representing the value of liquidity tokens you will burn to get tokens back\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to recieve\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to recieve\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function removeLiquidity(\n  address1,\n  address2,\n  liquidity_tokens,\n  amount1min,\n  amount2min,\n  routerContract,\n  account,\n  signer,\n  factory\n) {\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const token2 = new Contract(address2, ERC20.abi, signer);\n\n  const token1Decimals = await getDecimals(token1);\n  const token2Decimals = await getDecimals(token2);\n\n  const Getliquidity = (liquidity_tokens)=>{\n    if (liquidity_tokens < 0.001){\n      return ethers.BigNumber.from(liquidity_tokens*10**18);\n    }\n    return ethers.utils.parseUnits(String(liquidity_tokens), 18);\n  }\n\n  const liquidity = Getliquidity(liquidity_tokens);\n  console.log('liquidity: ', liquidity);\n\n  const amount1Min = ethers.utils.parseUnits(String(amount1min), token1Decimals);\n  const amount2Min = ethers.utils.parseUnits(String(amount2min), token2Decimals);\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const wethAddress = await routerContract.WETH();\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  await pair.approve(routerContract.address, liquidity);\n\n  console.log([\n    address1,\n    address2,\n    Number(liquidity),\n    Number(amount1Min),\n    Number(amount2Min),\n    account,\n    deadline,\n  ]);\n\n  if (address1 === wethAddress) {\n    // Eth + Token\n    await routerContract.removeLiquidityETH(\n      address2,\n      liquidity,\n      amount2Min,\n      amount1Min,\n      account,\n      deadline\n    );\n  } else if (address2 === wethAddress) {\n    // Token + Eth\n    await routerContract.removeLiquidityETH(\n      address1,\n      liquidity,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  } else {\n    // Token + Token\n    await routerContract.removeLiquidity(\n      address1,\n      address2,\n      liquidity,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  }\n}\n\nconst quote = (amount1, reserve1, reserve2) => {\n  const amount2 = amount1 * (reserve2 / reserve1);\n  return [amount2];\n};\n\n// Function used to get a quote of the liquidity addition\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `amountA_desired` - The prefered value of the first token that the user would like to deploy as liquidity\n//    `amountB_desired` - The prefered value of the second token that the user would like to deploy as liquidity\n//    `factory` - The current factory\n//    `signer` - The current signer\n\nasync function quoteMintLiquidity(\n  address1,\n  address2,\n  amountA,\n  amountB,\n  factory,\n  signer\n){\n  const MINIMUM_LIQUIDITY = 1000;\n  let _reserveA = 0;\n  let _reserveB = 0;\n  let totalSupply = 0;\n  [_reserveA, _reserveB, totalSupply] = await factory.getPair(address1, address2).then(async (pairAddress) => {\n    if (pairAddress !== '0x0000000000000000000000000000000000000000'){\n      const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n      const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\n      const reserveA = reservesRaw[0];\n      const reserveB = reservesRaw[1];\n    \n      const _totalSupply = await pair.totalSupply();\n      const totalSupply = Number(ethers.utils.formatEther(_totalSupply));\n      return [reserveA, reserveB, totalSupply]\n    } else {\n      return [0,0,0]\n    }\n  });\n\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const token2 = new Contract(address2, ERC20.abi, signer);\n\n  // Need to do all this decimals work to account for 0 decimal numbers\n\n  const token1Decimals = await getDecimals(token1);\n  const token2Decimals = await getDecimals(token2);\n\n  const valueA = amountA*(10**token1Decimals);\n  const valueB = amountB*(10**token2Decimals);\n\n  const reserveA = _reserveA*(10**token1Decimals);\n  const reserveB = _reserveB*(10**token2Decimals);\n\n  if (totalSupply == 0){\n    return Math.sqrt(((valueA * valueB)-MINIMUM_LIQUIDITY))*10**(-18);\n  };\n  \n  return (\n    Math.min(valueA*totalSupply/reserveA, valueB*totalSupply/reserveB)\n  );\n};\n\nexport async function quoteAddLiquidity(\n  address1,\n  address2,\n  amountADesired,\n  amountBDesired,\n  factory,\n  signer\n) {\n\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\n  const reserveA = reservesRaw[0];\n  const reserveB = reservesRaw[1];\n\n  if (reserveA === 0 && reserveB === 0) {\n    const amountOut = await quoteMintLiquidity(\n      address1,\n      address2,\n      amountADesired,\n      amountBDesired,\n      factory,\n      signer);\n    return [\n      amountADesired,\n      amountBDesired,\n      amountOut.toPrecision(8),\n    ];\n  } else {\n    const amountBOptimal = quote(amountADesired, reserveA, reserveB);\n    if (amountBOptimal <= amountBDesired) {\n      const amountOut = await quoteMintLiquidity(\n        address1,\n        address2,\n        amountADesired,\n        amountBOptimal,\n        factory,\n        signer);\n      return [\n        amountADesired,\n        amountBOptimal,\n        amountOut.toPrecision(8),\n      ];\n    } else {\n      const amountAOptimal = quote(\n        amountBDesired,\n        reserveB,\n        reserveA\n      );\n      const amountOut = await quoteMintLiquidity(\n        address1,\n        address2,\n        amountAOptimal,\n        amountBDesired,\n        factory,\n        signer);\n      return [\n        amountAOptimal,\n        amountBDesired,\n        amountOut.toPrecision(8),\n      ];\n    }\n  }\n}\n\n// Function used to get a quote of the liquidity removal\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `liquidity` - The amount of liquidity tokens the user will burn to get their tokens back\n//    `factory` - The current factory\n//    `signer` - The current signer\n\nexport async function quoteRemoveLiquidity(\n  address1,\n  address2,\n  liquidity,\n  factory,\n  signer\n) {\n  const pairAddress = await factory.getPair(address1, address2);\n  console.log(\"pair address\", pairAddress);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\n  const reserveA = reservesRaw[0];\n  const reserveB = reservesRaw[1];\n\n  const feeOn =\n    (await factory.feeTo()) !== 0x0000000000000000000000000000000000000000;\n\n  const _kLast = await pair.kLast();\n  const kLast = Number(ethers.utils.formatEther(_kLast));\n\n  const _totalSupply = await pair.totalSupply();\n  let totalSupply = Number(ethers.utils.formatEther(_totalSupply));\n\n  if (feeOn && kLast > 0) {\n    const feeLiquidity =\n      (totalSupply * (Math.sqrt(reserveA * reserveB) - Math.sqrt(kLast))) /\n      (5 * Math.sqrt(reserveA * reserveB) + Math.sqrt(kLast));\n    totalSupply = totalSupply + feeLiquidity;\n  }\n\n  const Aout = (reserveA * liquidity) / totalSupply;\n  const Bout = (reserveB * liquidity) / totalSupply;\n\n  return [liquidity, Aout, Bout];\n}\n","import React, { useEffect } from \"react\";\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport AccountBalanceIcon from \"@material-ui/icons/AccountBalance\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  getBalanceAndSymbol,\n  getReserves,\n} from \"../ethereumFunctions\";\n\nimport { addLiquidity, quoteAddLiquidity } from \"./LiquidityFunctions\";\n\nimport CoinField from \"../CoinSwapper/CoinField\";\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(3),\n    width: \"40%\",\n    overflow: \"wrap\",\n    background: \"linear-gradient(45deg, #ff0000 30%, #FF8E53 90%)\",\n    color: \"white\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  values: {\n    width: \"50%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction LiquidityDeployer(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Stores the user's balance of liquidity tokens for the current pair\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\");\n\n  // Used when getting a quote of liquidity\n  const [liquidityOut, setLiquidityOut] = React.useState([0, 0, 0]);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    let oldField1Value = field1Value;\n    let oldField2Value = field2Value;\n\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setField1Value(oldField2Value);\n    setField2Value(oldField1Value);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n    field2: (e) => {\n      setField2Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n    const parsedInput1 = parseFloat(field1Value);\n    const parsedInput2 = parseFloat(field2Value);\n    return (\n      coin1.address &&\n      coin2.address &&\n      parsedInput1 !== NaN &&\n      0 < parsedInput1 &&\n      parsedInput2 !== NaN &&\n      0 < parsedInput2 &&\n      parsedInput1 <= coin1.balance &&\n      parsedInput2 <= coin2.balance\n    );\n  };\n\n\n\n  const deploy = () => {\n    console.log(\"Attempting to deploy liquidity...\");\n    setLoading(true);\n\n    addLiquidity(\n      coin1.address,\n      coin2.address,\n      field1Value,\n      field2Value,\n      '0',\n      '0',\n      props.network.router,\n      props.network.account,\n      props.network.signer\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        setField2Value(\"\");\n        enqueueSnackbar(\"Deployment Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(\n        props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n        ).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n        ).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address && props.network.account) {\n      getReserves(\n        coin1.address,\n        coin2.address,\n        props.network.factory,\n        props.network.signer,\n        props.network.account\n        ).then(\n        (data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        }\n      );\n    }\n  }, [coin1.address, coin2.address, props.network.account, props.network.factory, props.network.signer]);\n\n  // This hook is called when either of the state variables `field1Value`, `field2Value`, `coin1.address` or `coin2.address` change.\n  // It will give a preview of the liquidity deployment.\n  useEffect(() => {\n    if (isButtonEnabled()) {\n      console.log(\"Trying to preview the liquidity deployment\");\n\n      quoteAddLiquidity(\n        coin1.address,\n        coin2.address,\n        field1Value,\n        field2Value,\n        props.network.factory,\n        props.network.signer\n      ).then((data) => {\n        // console.log(data);\n        console.log(\"TokenA in: \", data[0]);\n        console.log(\"TokenB in: \", data[1]);\n        console.log(\"Liquidity out: \", data[2]);\n        setLiquidityOut([data[0], data[1], data[2]]);\n      });\n    }\n  }, [coin1.address, coin2.address, field1Value, field2Value, props.network.factory, props.network.signer]);\n\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n  useEffect(() => {\n    const coinTimeout = setTimeout(() => {\n      console.log(\"Checking balances & Getting reserves...\");\n\n      if (coin1.address && coin2.address && props.network.account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          props.network.factory,\n          props.network.signer,\n          props.network.account\n        ).then((data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        });\n      }\n\n      if (coin1.address && props.network.account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin1.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n          ).then(\n          (data) => {\n            setCoin1({\n              ...coin1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (coin2.address && props.network.account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin2.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n          ).then(\n          (data) => {\n            setCoin2({\n              ...coin2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  return (\n    <div>\n      {/* Liquidity deployer */}\n      <Typography variant=\"h5\" className={classes.title}></Typography>\n\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={props.network.coins}\n        signer={props.network.signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={props.network.coins}\n        signer={props.networksigner}\n      />\n      <WrongNetwork\n        open={wrongNetworkOpen}\n      />\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <Grid item xs={12} className={classes.fullWidth}>\n          <CoinField\n            activeField={true}\n            value={field1Value}\n            onClick={() => setDialog1Open(true)}\n            onChange={handleChange.field1}\n            symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.fullWidth}>\n          <CoinField\n            activeField={true}\n            value={field2Value}\n            onClick={() => setDialog2Open(true)}\n            onChange={handleChange.field2}\n            symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n          />\n        </Grid>\n      </Grid>\n\n      <Grid\n        container\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        spacing={4}\n        className={classes.balance}\n      >\n        <hr className={classes.hr} />\n        <Grid\n          container\n          item\n          className={classes.values}\n          direction=\"column\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          {/* Balance Display */}\n          <Typography variant=\"h6\">Your Balances</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin1.balance, coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin2.balance, coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Reserves Display */}\n          <Typography variant=\"h6\">Reserves</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[0], coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[1], coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Liquidity Tokens Display */}\n          <Typography variant=\"h6\">Your Liquidity Pool Tokens</Typography>\n          <Grid container direction=\"row\" justifyContent=\"center\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(liquidityTokens, \"UNI-V2\")}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Paper className={classes.paperContainer}>\n          {/*Red  Display to show the quote */}\n          <Grid\n            container\n            item\n            direction=\"column\"\n            alignItems=\"center\"\n            spacing={2}\n            className={classes.fullWidth}\n          >\n            {/* Tokens in */}\n            <Typography variant=\"h6\">Tokens in</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(liquidityOut[0], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(liquidityOut[1], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Liquidity Tokens Display */}\n            <Typography variant=\"h6\">Liquidity Pool Tokens Out</Typography>\n            <Grid container direction=\"row\" justifyContent=\"center\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(liquidityOut[2], \"UNI-V2\")}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Paper>\n\n        <hr className={classes.hr} />\n      </Grid>\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <LoadingButton\n          loading={loading}\n          valid={isButtonEnabled()}\n          success={false}\n          fail={false}\n          onClick={deploy}\n        >\n          <AccountBalanceIcon className={classes.buttonIcon} />\n          Deploy\n        </LoadingButton>\n      </Grid>\n    </div>\n  );\n}\n\nexport default LiquidityDeployer;\n","import React, { useEffect } from \"react\";\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  getBalanceAndSymbol,\n  getReserves,\n} from \"../ethereumFunctions\";\nimport { removeLiquidity, quoteRemoveLiquidity } from \"./LiquidityFunctions\";\nimport {\n  RemoveLiquidityField1,\n  RemoveLiquidityField2,\n} from \"../CoinSwapper/CoinField\";\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(3),\n    width: \"40%\",\n    overflow: \"wrap\",\n    background: \"linear-gradient(45deg, #ff0000 30%, #FF8E53 90%)\",\n    color: \"white\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  values: {\n    width: \"50%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction LiquidityRemover(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\n\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Stores the liquidity tokens balance of the user\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\");\n\n  // Stores the input and output for the liquidity removal preview\n  const [tokensOut, setTokensOut] = React.useState([0, 0, 0]);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n    const parsedInput = parseFloat(field1Value);\n    return (\n      coin1.address &&\n      coin2.address &&\n      parsedInput !== NaN &&\n      0 < parsedInput &&\n      parsedInput <= liquidityTokens\n    );\n  };\n\n  const remove = () => {\n    console.log(\"Attempting to remove liquidity...\");\n    setLoading(true);\n\n    removeLiquidity(\n      coin1.address,\n      coin2.address,\n      field1Value,\n      0,\n      0,\n      props.network.router,\n      props.network.account,\n      props.network.signer,\n      props.network.factory\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        enqueueSnackbar(\"Removal Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(\n        props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n        ).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n        ).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address && props.network.account) {\n      getReserves(\n        coin1.address,\n        coin2.address,\n        props.network.factory,\n        props.network.signer,\n        props.network.account).then(\n        (data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        }\n      );\n    }\n  }, [coin1.address, coin2.address, props.network.account, props.network.factory, props.network.signer]);\n\n  // This hook is called when either of the state variables `field1Value`, `coin1.address` or `coin2.address` change.\n  // It will give a preview of the liquidity removal.\n  useEffect(() => {\n    if (isButtonEnabled()) {\n      console.log(\"Trying to preview the liquidity removal\");\n      quoteRemoveLiquidity(\n        coin1.address,\n        coin2.address,\n        field1Value,\n        props.network.factory,\n        props.network.signer\n      ).then((data) => {\n        setTokensOut(data);\n      });\n    }\n  }, [coin1.address, coin2.address, field1Value, props.network.factory, props.network.signer]);\n\n  useEffect(() => {\n    // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n    // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n\n    const coinTimeout = setTimeout(() => {\n      console.log(\"Checking balances & Getting reserves...\");\n\n      if (coin1.address && coin2.address && props.network.account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          props.network.factory,\n          props.network.signer,\n          props.network.account\n        ).then((data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        });\n      }\n\n      if (coin1.address && props.network.account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin1.address, props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n          ).then(\n          (data) => {\n            setCoin1({\n              ...coin1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (coin2.address && props.network.account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(props.network.account,\n          coin2.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n          ).then(\n          (data) => {\n            setCoin2({\n              ...coin2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  return (\n    <div>\n      {/* Coin Swapper */}\n      <Typography variant=\"h5\" className={classes.title}></Typography>\n\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={props.network.coins}\n        signer={props.network.signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={props.network.coins}\n        signer={props.network.signer}\n      />\n      <WrongNetwork\n        open={wrongNetworkOpen}\n      />\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <Grid item xs={12} className={classes.fullWidth}>\n          <RemoveLiquidityField1\n            activeField={true}\n            value={field1Value}\n            onClick={() => setDialog1Open(true)}\n            onChange={handleChange.field1}\n            symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.fullWidth}>\n          <RemoveLiquidityField2\n            activeField={true}\n            onClick={() => setDialog2Open(true)}\n            symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n          />\n        </Grid>\n      </Grid>\n\n      <Grid\n        container\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        spacing={4}\n        className={classes.balance}\n      >\n        <hr className={classes.hr} />\n        <Grid\n          container\n          item\n          className={classes.values}\n          direction=\"column\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          {/* Balance Display */}\n          <Typography variant=\"h6\">Your Balances</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin1.balance, coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin2.balance, coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Reserves Display */}\n          <Typography variant=\"h6\">Reserves</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[0], coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[1], coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Liquidity Tokens Display */}\n          <Typography variant=\"h6\">Your Liquidity Pool Tokens</Typography>\n          <Grid container direction=\"row\" justifyContent=\"center\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(liquidityTokens, \"UNI-V2\")}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <Paper className={classes.paperContainer}>\n          {/*Red  Display to show the quote */}\n          <Grid\n            container\n            item\n            direction=\"column\"\n            alignItems=\"center\"\n            spacing={2}\n            className={classes.fullWidth}\n          >\n            {/* Tokens in */}\n            <Typography variant=\"h6\">Liquidity Pool Tokens in</Typography>\n            <Grid container direction=\"row\" justifyContent=\"center\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(tokensOut[0], \"UNI-V2\")}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Liquidity Tokens Display */}\n            <Typography variant=\"h6\">Tokens Out</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(tokensOut[1], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(tokensOut[2], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Paper>\n        <hr className={classes.hr} />\n      </Grid>\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <LoadingButton\n          loading={loading}\n          valid={isButtonEnabled()}\n          success={false}\n          fail={false}\n          onClick={remove}\n        >\n          <ArrowDownwardIcon className={classes.buttonIcon} />\n          Remove\n        </LoadingButton>\n      </Grid>\n    </div>\n  );\n}\n\nexport default LiquidityRemover;\n","import React from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\n\nimport SwitchButton from \"./SwitchButton\";\nimport LiquidityDeployer from \"./LiquidityDeployer\";\nimport LiquidityRemover from \"./RemoveLiquidity\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    maxWidth: 700,\n    margin: \"auto\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  footer: {\n    marginTop: \"155px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction Liquidity(props) {\n  const classes = useStyles();\n\n  const [deploy, setDeploy] = React.useState(true);\n\n  const deploy_or_remove = (deploy) => {\n    if (deploy === true) {\n      return <LiquidityDeployer network={props.network} />;\n    }\n    return <LiquidityRemover network={props.network} />;\n  };\n\n  return (\n    <div>\n      <Container>\n        <Paper className={classes.paperContainer}>\n          <Typography variant=\"h5\" className={classes.title}>\n            <SwitchButton setDeploy={setDeploy} />\n          </Typography>\n\n          {deploy_or_remove(deploy)}\n        </Paper>\n      </Container>\n\n      {/* <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n          Alternative Uniswap Interface | Get AUT for use in the bakerloo testnet{\" \"}\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\n        </p>\n      </Grid> */}\n    </div>\n  );\n}\n\nexport default Liquidity;\n","import React from \"react\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\nimport Web3Provider from \"./network\";\nimport NarBar from \"./NavBar/NavBar\";\nimport CoinSwapper from \"./CoinSwapper/CoinSwapper\";\nimport { Route } from \"react-router-dom\";\nimport { SnackbarProvider } from \"notistack\";\nimport Liquidity from \"./Liquidity/Liquidity\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#ff0000\",\n      contrastText: \"#ffffff\",\n    },\n    secondary: {\n      main: \"#9e9e9e\",\n      contrastText: \"#ffffff\",\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <SnackbarProvider maxSnack={3}>\n        <ThemeProvider theme={theme}>\n          <Web3Provider\n            render={(network) => (\n              <div>\n                <NarBar />\n                <Route exact path=\"/\">\n                  <CoinSwapper network={network} />\n                </Route>\n\n                <Route exact path=\"/liquidity\">\n                  <Liquidity network={network} />\n                </Route>\n              </div>\n            )}\n          ></Web3Provider>\n        </ThemeProvider>\n      </SnackbarProvider>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}